<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Calorie fuck away</title>
      <link href="/2024/02/14/calory/"/>
      <url>/2024/02/14/calory/</url>
      
        <content type="html"><![CDATA[<h1 id="科学饮食指南"><a href="#科学饮食指南" class="headerlink" title="科学饮食指南"></a>科学饮食指南</h1><h2 id="模型介绍"><a href="#模型介绍" class="headerlink" title="模型介绍"></a>模型介绍</h2><p>$E_i$: <strong>摄入能量</strong>，kCal</p><p>$E_e$:消耗能量，kCal</p><p>​    一般来说，消耗7000kCal 一般能够减少1kg体重。因此：</p><script type="math/tex; mode=display">\frac{dm}{dt}=\frac{E_i-E_e}{7000}</script><p>$E_e = E_a +\alpha P$</p><p>$E_a$：<strong>额外运动</strong>消耗能量</p><p>$\alpha P$​：正常情况消耗能量</p><p>$\alpha$：活动量系数。</p><script type="math/tex; mode=display">\alpha=\begin{cases}1.3\text{ 轻体力劳动}\\1.5\text{ 中体力劳动}\\1.9\text{ 重体力劳动}\end{cases}</script><p>$P$​​：代表基础代谢率（BMR，似乎也有叫BEE的），kCal。使用 Harris-Benedict 公式计算：</p><script type="math/tex; mode=display">P=10m +6.25h-5a+S</script><p>$m$：体重，kg。</p><p>$h$：身高，cm</p><p>$a$：年龄。</p><p>$S$：与性别相关的常数。</p><script type="math/tex; mode=display">S=\begin{cases}5&\text{男性}\\-161&\text{ 女性}\end{cases}</script><p>​    所以女性日常消耗能量更少，减重更难。</p><hr><h2 id="体重收敛方式"><a href="#体重收敛方式" class="headerlink" title="体重收敛方式"></a>体重收敛方式</h2><script type="math/tex; mode=display">\frac{dm}{dt}=\frac{E_I-E_a-\alpha(10m+6.25h-5a+S)}{7000}</script><p>​    对于一个正常人，基础代谢率中的最后三项基本不变，视作一个人的特征常数$C$。</p><script type="math/tex; mode=display">\frac{dm}{dt}=\frac{E_I-E_a-10\alpha -\alpha C}{7000}</script><p>根据每日摄入能量、消耗能量、身体状况等条件，可以计算出一段时间后体重的收敛值（增重、减重，收敛时长）。</p><p>如果你减重，可以看<a href="https://www.bilibili.com/video/BV1W441167qn/?share_source=copy_web&amp;vd_source=ad75372752cf4ad8640731726b03c555">【自动控制原理】一起燃烧卡路里/科学减肥(1)_系统分析实例_数学建模部分_Matlab/Simulink</a>  算一下。顺便学个Simulink。</p><hr><h2 id="每日能量需求"><a href="#每日能量需求" class="headerlink" title="每日能量需求"></a>每日能量需求</h2><p>指<strong>维持当前体重</strong>的近似能量摄入量。增肌可以增加摄入，减重则适量减少。</p><script type="math/tex; mode=display">能量需求 = BMR * PAL</script><p>PAL指运动系数。取值见下表。</p><div class="table-container"><table><thead><tr><th>运动强度</th><th>运动系数PAL</th></tr></thead><tbody><tr><td>久坐或基本不运动</td><td>1.2</td></tr><tr><td>每周运动1-3次</td><td>1.375</td></tr><tr><td>每周运动4-5次</td><td>1.465</td></tr><tr><td>每天运动或每周剧烈运动3-4次</td><td>1.55</td></tr><tr><td>每周剧烈运动6-7次</td><td>1.725</td></tr><tr><td>每天高强度运动或重体力劳动者</td><td>1.9</td></tr></tbody></table></div><p><em>运动：15-30分钟的高心率活动</em></p><p><em>剧烈运动：45-120分钟的高心率活动</em></p><p><em>高强度运动：2个多小时的高心率活动</em></p><p>这部分数据可以靠运动手环等获取。</p><h2 id="计算能量需求"><a href="#计算能量需求" class="headerlink" title="计算能量需求"></a>计算能量需求</h2><p>根据上表选择适合自己的PAL，让GPT帮您计算。</p><p>Q：<strong>你是一个专业的营养师，请利用 Mifflin 修正的Harris-Benedict公式，帮我计算我的总能量需求。我的年龄是21岁，体重55kg，身高172cm，PAL为1.2。</strong></p><p>A：<strong>1587.3kCal / 天</strong></p><h2 id="增肌摄入建议"><a href="#增肌摄入建议" class="headerlink" title="增肌摄入建议"></a>增肌摄入建议</h2><p>想要干净增肌，需要控制每日摄入量。影响肌肉合成的营养主要有三种：<strong>蛋白、脂肪、碳水</strong>。</p><h3 id="摄入量"><a href="#摄入量" class="headerlink" title="摄入量"></a>摄入量</h3><p>GPT说：</p><ol><li><strong>蛋白质摄入量</strong>：对于增肌，建议每天摄入1.6-2.2克蛋白质/千克体重。根据您的体重为55公斤，您的蛋白质摄入量应在88-121克之间。</li><li><strong>总能量摄入量</strong>：确定您的总能量需求，可以根据您的活动水平和目标进行调整。作为一个粗略的指导，如果您进行中等强度的锻炼并希望增肌，您的总能量摄入量应略高于维持体重所需的热量。通常，增肌阶段每天增加100-250卡路里的摄入量。您可以使用BMR（基础代谢率）和PAL（活动水平系数）的公式来计算您的总能量需求。</li><li><strong>碳水化合物摄入量</strong>：在增肌阶段，您的碳水化合物摄入量应占总能量摄入的适当比例。建议约占总能量摄入的<strong>45-65%</strong>。您可以根据自己的喜好和耐受性，选择复杂的碳水化合物，如全谷物、蔬菜和水果。</li><li><strong>脂肪摄入量</strong>：脂肪是维持健康和提供能量的重要营养素。建议脂肪摄入量占总能量摄入的<strong>20-35%</strong>。选择健康的脂肪来源，如鱼类、坚果、种子和橄榄油。</li></ol><p><a href="https://www.bilibili.com/video/BV1sS4y1J7wq/?share_source=copy_web&amp;vd_source=ad75372752cf4ad8640731726b03c555">干净增肌完整指南！看完必会！</a>提到的数据如下：</p><ol><li><p>蛋白：1.6g / kg 体重</p></li><li><p>脂肪：1g / kg 体重</p><ul><li>吃多容易胖，吃少容易没欲望</li></ul></li><li><p>碳水：2~6g /kg 体重 </p><ul><li>根据身体状况动态调整每日摄入</li></ul></li></ol><blockquote><p>吃的这么锱铢必较。</p></blockquote><h3 id="摄入时间"><a href="#摄入时间" class="headerlink" title="摄入时间"></a>摄入时间</h3><ul><li><p>蛋白</p><ul><li>随时吃</li></ul></li><li><p>碳水</p><ul><li><p>早餐碳水量占50%左右</p></li><li><p>训练前1~1.5h</p></li><li>训练后</li></ul></li></ul><blockquote><p>你懒得训练</p><ol><li><p>Harris-Benedict公式采用1990年米夫林和圣杰尔修订了哈里斯-本尼迪克特方程。<a href="https://en.wikipedia.org/wiki/Harris–Benedict_equation">哈里斯-本尼迪克特方程 - 维基百科</a></p></li><li><p>该公式适用于BMI<strong>正常</strong>或<strong>超重</strong>的人群。</p></li><li>未比较不同公式的优劣、适用人群。计算结果仅供参考。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Nonsense </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Crash into CV</title>
      <link href="/2024/02/14/crash-into-cv/"/>
      <url>/2024/02/14/crash-into-cv/</url>
      
        <content type="html"><![CDATA[<h2 id="线性回归中的数学"><a href="#线性回归中的数学" class="headerlink" title="线性回归中的数学"></a>线性回归中的数学</h2><h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><p>Q: 介绍随机梯度下降算法</p><p>A: 随机梯度下降（Stochastic Gradient Descent，SGD）是一种常用的优化算法，用于训练机器学习模型，特别是在大规模数据集上。</p><p>梯度下降算法的目标是最小化一个损失函数，通过迭代更新模型的参数来逐步接近最优解。传统的梯度下降算法在每次迭代中都需要计算所有样本的梯度，然后更新参数。然而，当数据集很大时，这样的计算开销会很高。</p><p>随机梯度下降算法通过每次迭代只随机选择一个样本来估计梯度，并根据该估计更新参数。与传统梯度下降相比，随机梯度下降的计算开销较小，使得它在大规模数据集上更具可行性。</p><p>下面是随机梯度下降算法的基本步骤：</p><ol><li>初始化模型参数：根据模型的要求，初始化参数的值。</li><li>随机选择一个样本：从训练数据集中随机选择一个样本。</li><li>计算梯度：对于选择的样本，计算损失函数关于模型参数的梯度。</li><li>更新参数：使用梯度信息来更新模型参数。通常使用学习率（learning rate）来控制每次更新的步长。</li><li>重复步骤2-4：重复执行步骤2到步骤4，直到达到预定的迭代次数或收敛条件。</li></ol><p>随机梯度下降算法的主要优点是计算开销相对较小，尤其适用于大规模数据集。然而，由于每次迭代只使用一个样本，随机梯度估计可能会存在较大的方差，导致参数更新的不稳定性。为了解决这个问题，可以采用一些改进的随机梯度下降算法，如批量随机梯度下降（mini-batch SGD），它在每次迭代中使用一小批样本来估计梯度，并更新参数。这样可以在一定程度上平衡计算效率和参数更新的稳定性。</p><p>Q: 学习率如何确定</p><p>A: 确定学习率是梯度下降算法中的一个重要步骤，它决定了参数更新的步长。选择不合适的学习率可能导致训练过程不稳定、收敛速度过慢或无法收敛到最优解。以下是确定学习率的常见方法：</p><ol><li>经验选择：根据经验或领域知识，选择一个合适的学习率。这通常需要进行多次实验和调整，以找到一个在给定问题上表现良好的学习率。</li><li>网格搜索：尝试一系列预定义的学习率值，并评估每个学习率下的模型性能。可以通过交叉验证或验证集上的性能指标来选择最佳学习率。</li><li>学习率衰减：开始时使用较大的学习率，然后随着训练的进行逐渐减小学习率。学习率衰减可以使模型在开始时更快地收敛，然后在接近最优解时精细调整参数。</li><li>自适应学习率方法：使用自适应的学习率算法，根据模型在训练过程中的性能自动调整学习率。例如，AdaGrad、RMSProp 和 Adam 等优化算法根据梯度的历史信息来调整学习率。</li><li>损失函数的曲线观察：观察损失函数在训练过程中的变化情况。如果损失函数在迭代过程中震荡或发散，可能是学习率太大，需要减小学习率。如果损失函数收敛速度过慢，可能是学习率太小，需要增大学习率。</li></ol><p>需要注意的是，学习率的选择是一项挑战性的任务，没有通用的最佳策略，因为它受到数据集、模型复杂度和训练算法等多个因素的影响。因此，通常需要进行实验和调整，以找到适合特定问题的学习率。</p><p>Q: 举一个计算梯度的例子</p><p>A: 假设我们有一个简单的二元函数 f(x, y) = x^2 + y^2，其中 x 和 y 是参数。现在我们希望找到使得函数 f 取得最小值的参数配置。</p><p>我们可以计算函数 f 对于参数 x 和 y 的偏导数，得到梯度向量 (∂f/∂x, ∂f/∂y)。在这个例子中，梯度向量的每个分量可以通过对应参数的偏导数来计算。</p><p>偏导数 ∂f/∂x 表示在给定的点 (x, y) 上，函数 f 关于参数 x 的变化率。类似地，偏导数 ∂f/∂y 表示函数 f 关于参数 y 的变化率。</p><p>计算偏导数的结果如下：</p><p>∂f/∂x = 2x<br>∂f/∂y = 2y</p><p>假设我们在初始点 (x0, y0) = (1, 2)，现在我们可以计算该点处的梯度值：</p><p>∂f/∂x = 2x0 = 2(1) = 2<br>∂f/∂y = 2y0 = 2(2) = 4</p><p>因此，初始点 (1, 2) 处的梯度向量为 (2, 4)。</p><p>根据梯度的信息，我们可以知道在点 (1, 2) 处函数 f 在 x 方向上的斜率为 2，而在 y 方向上的斜率为 4。这意味着我们应该朝着 x 方向减小 x 的值以及朝着 y 方向减小 y 的值，以使函数 f 下降最快。</p><p>使用梯度下降算法，我们可以更新参数的值，例如使用学习率为 0.1：</p><p>新的 x = 1 - 0.1 <em> 2 = 0.8<br>新的 y = 2 - 0.1 </em> 4 = 1.6</p><p>通过迭代更新参数，我们可以逐渐接近函数 f 的最小值点 (0, 0)。</p><p>Q: 在梯度下降算法中，为什么不将梯度向量单位化</p><p>A: 在梯度下降算法中，我们通常不将梯度向量单位化（即将其转换为单位向量）。这是因为梯度的长度（即梯度向量的范数）包含了有关损失函数的重要信息，长度较大的梯度表示在当前参数配置下，损失函数的变化率较大，需要更大的步长来更新参数。</p><p>将梯度向量单位化会将其长度归一化为1，这将使得每次参数更新的步长只依赖于学习率的大小，而不再考虑梯度的幅度。这可能导致问题，因为不同的参数可能具有不同的梯度幅度，某些参数可能需要更大的步长来更新，而其他参数可能需要更小的步长。</p><p>通过保留梯度向量的长度信息，我们可以根据梯度的幅度来自适应地调整参数的更新步长。较大的梯度表示在当前参数配置下，函数的变化较大，因此需要更大的步长来更新参数。相反，较小的梯度表示函数的变化较小，因此可以使用较小的步长以避免在最优解附近发生震荡或错过最优解。</p><p>因此，在梯度下降算法中，我们将梯度向量的方向和幅度都考虑在内，通过乘以学习率来控制参数更新的步长，以便更有效地搜索损失函数的最小值点。</p><h3 id="3-1-6练习"><a href="#3-1-6练习" class="headerlink" title="3.1.6练习"></a>3.1.6练习</h3><ol><li>假设我们有一些数据$x_1,x_2,…,x_n \in R$。我们的目标是找到一个常数$b$，使得最小化$\sum_i(x_i-b)^2$<ol><li>找到最优值$b$的解析解。</li><li>这个问题及其解与正态分布有什么关系?</li></ol></li></ol><p><strong>Q1</strong></p><p>​    设目标函数：</p><script type="math/tex; mode=display">f(\bold{x})=\sum_i(x_i-b)^2</script><p>对$b$求导，令导数为零。</p><script type="math/tex; mode=display">\frac{\partial f(\bold{x})}{\partial b} = nb-\sum_i x_i=0</script><p>可得</p><script type="math/tex; mode=display">b=\frac1n\sum_ix_i=\overline{x}</script><p>最优值为$x_1,x_2,…,x_n$的均值。</p><p><strong>Q2</strong></p><p>假设$x_1,…,x_n$取自符合正态分布的整体$X\sim N(\mu,\sigma^2)$。则$\mu$的极大似然估计即为$b$。</p><ol><li><p>推导出使用平方误差的线性回归优化问题的解析解。为了简化问题，可以忽略偏置$b$（我们可以通过向$X$添加所有值为1的一列来做到这一点）。</p><ol><li><p>用矩阵和向量表示法写出优化问题（将所有数据视为单个矩阵，将所有目标值视为单个向量）。</p></li><li><p>计算损失对$w$ 的梯度。</p></li><li><p>通过将梯度设为0、求解矩阵方程来找到解析解。</p></li><li><p>什么时候可能比使用随机梯度下降更好？这种方法何时会失效？</p></li></ol></li></ol><p><strong>Q1</strong></p><p>目标函数：</p><script type="math/tex; mode=display">f(\bold{w})=\frac12 || \bold{y}-\bold{X}\cdot w ||_2^2</script><p>$||\cdot||_2$表示<a href="https://blog.csdn.net/weixin_38937984/article/details/102975811">欧几里得范数（L2范数）</a>。</p><p>其取得最小值点的必要条件为：</p><script type="math/tex; mode=display">\nabla_w\left(\frac12\cdot\|y-X\cdot w\|_2^2\right)=0.</script><p>因为</p><script type="math/tex; mode=display">\|y-X\cdot w\|_2^2=(y-X\cdot w)^T\cdot(y-X\cdot w)=y^T\cdot y-2\cdot y^T\cdot X\cdot w+w^T\cdot X^T\cdot X\cdot w</script><p>对上式求导，即可得：</p><script type="math/tex; mode=display">\nabla_w\left(\frac12\cdot\|y-X\cdot w\|_2^2\right)=-X^T\cdot y+X^T\cdot X\cdot w.</script><blockquote><p>对向量求导？得到的结果是一个同维度向量。详见<a href="https://zh-v2.d2l.ai/chapter_preliminaries/calculus.html#subsec-calculus-grad">2.4. 微积分 — 动手学深度学习</a> </p><p><a href="https://blog.csdn.net/weixin_60737527/article/details/123801257">矩阵求导（本质、原理与推导）详解-CSDN博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Nonsense </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Computer Vision </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CC starter 71 Div 2</title>
      <link href="/2023/12/31/ccstaters71/"/>
      <url>/2023/12/31/ccstaters71/</url>
      
        <content type="html"><![CDATA[<h1 id="CC-Starters-71-Div2"><a href="#CC-Starters-71-Div2" class="headerlink" title="CC Starters 71 Div2"></a>CC Starters 71 Div2</h1><h2 id="F-Unique-Mode"><a href="#F-Unique-Mode" class="headerlink" title="F.  Unique Mode"></a><a href="https://www.codechef.com/problems/UNQMODE?tab=statement">F.  Unique Mode</a></h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在一个数列中，有多少个子序列，满足子序列的众数唯一？</p><p>数列长度 $ N &lt; 10^5$ </p><p>其中 $ -10^9 \leq A[i] \leq 10^9$</p><p>每个数字的出现次数 $\leq100$</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>如果枚举每个区间的话很简单。对于每个右端点$R$，不断左移$L$指针，统计众数的重数，以及有几个众数。很简单，但是很慢。</p><p>我们发现，在左移$L$指针的时候，众数的重数一定是<strong>递增</strong>的。在某一个时刻，会出现新的<strong>唯一的众数</strong>$w$。我们假设它的重数为$K$；继续左移，会有两种情况：</p><ol><li><p>$w$的重数变成$K+1$</p></li><li><p>出现另一个数$q$，它的重数也是$K$</p></li></ol><p>这个时候，子列 $ A[L..R] $要么不符合要求，要么属于重数为 $K+1$的子列。</p><p>而此时右端点为$R$，左端点在 $L+1..R$ 之间的所有子列都可加入计数器。</p><p>因此对于每一个右端点，我们考虑找到它众数为$K$的可行子序列。通过上述分析，我们需要掌握的信息有：</p><script type="math/tex; mode=display">fir[k] : 第一次出现K重众数的位置</script><script type="math/tex; mode=display">sec[k] : 第一次出现多个K重众数的位置</script><p><strong>以上两个“第一次”都是基于不断左移左指针的基础上。</strong></p><p>当右端点移动时，只会有一个数字 $A[R+1] = num$ 的重数出现变化</p><p>如果$ pos[num][k] &gt; fir[k] :$</p><script type="math/tex; mode=display">sec[k] = fir[k]</script><script type="math/tex; mode=display">fir[k] = pos[num][k]</script><script type="math/tex; mode=display">否则：sec[k] = max(sec[k], pos[num][k])</script><p>相当于维护一个最大值和次大值。</p><p>注意，如果指针在$fir[k+1]+1与fir[k]$之间移动时始终保持众数唯一，就令$sec[k]=fir[k+1]$ 因此：</p><script type="math/tex; mode=display">sec[k] = max(fir[k+1], pos[num][k])</script><p>以$A[R+1]$结尾的合法子序列数有 $\sum (fir[k] - sec[k])$</p><p>答案可能超过$int$，注意使用龙龙。</p><p>复杂度：$N \times 100 + NlogN$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">max</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> MAXN<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> T<span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>MAXN<span class="token punctuation">]</span><span class="token punctuation">,</span>fir<span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sec<span class="token punctuation">[</span><span class="token number">104</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>fir<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> fir<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">memset</span><span class="token punctuation">(</span>sec<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> sec<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> pos<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>b <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token operator">-</span> b <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> siz <span class="token operator">=</span> pos<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> siz <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> siz <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                    pos<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>pos<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    pos<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> pos<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>siz<span class="token punctuation">)</span> pos<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token keyword">else</span> pos<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> siz<span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>             <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>fir<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> pos<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    sec<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>sec<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fir<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    fir<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> pos<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>                sec<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>sec<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                 ans <span class="token operator">+=</span> fir<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token function">max</span><span class="token punctuation">(</span>sec<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> fir<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本题中每个数字最多出现100次，所以最好从这里入手。因为众数的不可加性，大多数数据结构（除了分块，当然笔者也懒得写）都无法用在这道题中。</p>]]></content>
      
      
      <categories>
          
          <category> competition </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Goland</title>
      <link href="/2023/12/25/goland/"/>
      <url>/2023/12/25/goland/</url>
      
        <content type="html"><![CDATA[<blockquote><p>借此机会，熟悉一下IDE的使用。用Go写几道PTA即可</p></blockquote><p>Start from </p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">var arrName[n]TypearrName :&#x3D; [n]Type&#123;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">for index, value :&#x3D; range arrName&#123;    fmt.Println(index, value)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h1><p>一个slice由三个部分构成：<strong>指针、长度和容量</strong>。指针指向第一个slice元素对应的底层数组元素的地址，要注意的是slice的第一个元素并不一定就是数组的第一个元素。长度对应slice中元素的数目；长度不能超过容量，容量一般是从slice的开始位置到<strong>底层数据的结尾位置</strong>。内置的len和cap函数分别返回slice的长度和容量。</p><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>切片代表数组的一部分，我们有两种方法创建一个切片。</p><ol><li><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">scores :&#x3D; []int&#123;1,2,3,4&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>大多数情况下我们并不知道切片的具体内容，因而这种方法用的较少。</p><ol><li><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">scores :&#x3D; make([]int, 4)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>创建了一个长度为4，容量为4的切片。这里的<strong>长度和容量</strong>和<strong>变长数组</strong>中用到的一样。初始化时，所有位置的值都是零。</p><p>我们可以使用append函数，往切片<strong>尾部</strong>添加数据。当切片的容量不够时，go会自动以<strong>两倍的速度</strong>扩展容量。</p><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">scores :&#x3D; make([]int, 4)scores &#x3D; append(scores, 5)fmt.Println(cap(scores), scores)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时，切片<code>scores</code>的容量为8，长度为5；输出 ：8 <code>[0, 0, 0, 0, 5]</code></p><blockquote><p>cap() 是内置函数，可以返回切片的容量</p></blockquote><ol><li><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">scores :&#x3D; make([]int, 0, 4)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>创建一个长度为0，容量为4的切片。</p><p>此时，访问score[3]将是不合法的。因为切片的长度为0，访问的下表超出了范围。</p><p>总结起来，有四种常用方法。</p><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">names :&#x3D; []string&#123;&quot;leto&quot;, &quot;jessica&quot;, &quot;paul&quot;&#125;checks :&#x3D; make([]bool, 10)   &#x2F;&#x2F; 方便我们在特定位置写入数据var names []string           &#x2F;&#x2F; 空切片，长度为0，容量为0，和append配合使用scores :&#x3D; make([]int, 0, 20) &#x2F;&#x2F; 可以制定切片的初始容量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>更改切片的元素会改变其底层数组的元素内容；<strong>切片本身就是引用</strong></p><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">func main() &#123;    score :&#x3D; []int&#123;1, 2, 3, 4, 5&#125;    s :&#x3D; score[1:3]    s[0] &#x3D; 999    fmt.Println(score)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出: <code>[1,999,3,4,5]</code></p><p>看下面两个定义：</p><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">a :&#x3D; make([]Saiyan, 10)&#x2F;&#x2F;或者b :&#x3D; make([]*Saiyan, 10)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>很多开发人员认为传递<code>b</code>至一个函数或者让函数返回<code>b</code>效率更高。然而，这里传递或者返回的都是一个切片的拷贝，这本身就是一个引用。所以就传递或者返回这个切片而言，没有什么区别。</p><h1 id="包管理与导入"><a href="#包管理与导入" class="headerlink" title="包管理与导入"></a>包管理与导入</h1><p>Go语言中的包和其他语言的库或模块的概念类似，目的都是为了支持模块化、封装、单独编译和代码重用。一个包的源代码保存在一个或多个以.go为文件后缀名的源文件中，通常一个包所在目录路径的后缀是包的导入路径；例如包</p><pre class="line-numbers language-none"><code class="language-none">gopl.io&#x2F;ch1&#x2F;helloworld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对应的目录路径是</p><p><code>$GOPATH/src/gopl.io/ch1/helloworld</code>。</p><p>每个包都对应一个独立的名字空间。例如，在image包中的Decode函数和在unicode/utf16包中的 Decode函数是不同的。要在外部引用该函数，必须显式使用image.Decode或utf16.Decode形式访问。</p><p>当我们修改了一个源文件，我们必须重新编译该源文件对应的包（package）和所有依赖该包的其他包。</p><h2 id="包声明"><a href="#包声明" class="headerlink" title="包声明"></a>包声明</h2><p>在每个Go语言源文件的开头都必须有包声明语句。包声明语句的主要目的是确定当前包被其它包导入时默认的标识符（也称为包名）。</p><p>例如，math/rand包的每个源文件的开头都包含package rand包声明语句，所以当你导入这个包，你就可以用rand.Int、rand.Float64类似的方式访问包的成员。</p><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">package mainimport (    &quot;fmt&quot;    &quot;math&#x2F;rand&quot;)func main() &#123;    fmt.Println(rand.Int())&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通常来说，默认的包名就是包导入路径名的最后一段。当需要导入两个不同路径相同名称的包时，需要为一个包重命名</p></blockquote><h2 id="包导入"><a href="#包导入" class="headerlink" title="包导入"></a>包导入</h2><p>接上文，当我们想导入同名的两个包时，需要为一个包重命名。</p><pre class="line-numbers language-Go" data-language="Go"><code class="language-Go">import (    &quot;crypto&#x2F;rand&quot;    mrand &quot;math&#x2F;rand&quot; &#x2F;&#x2F; alternative name mrand avoids conflict)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Nonsense </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>摸爬滚打 Git</title>
      <link href="/2023/12/25/git/"/>
      <url>/2023/12/25/git/</url>
      
        <content type="html"><![CDATA[<h1 id="生成SSH"><a href="#生成SSH" class="headerlink" title="生成SSH"></a>生成SSH</h1><h2 id="用SSH（Secure-Shell）干什么？"><a href="#用SSH（Secure-Shell）干什么？" class="headerlink" title="用SSH（Secure Shell）干什么？"></a>用SSH（Secure Shell）干什么？</h2><blockquote><p>SSH以<a href="https://zh.wikipedia.org/wiki/非对称加密">非对称加密</a>实现<a href="https://zh.wikipedia.org/wiki/身份验证">身份验证</a>。身份验证有多种途径，例如其中一种方法是使用自动生成的公钥-私钥对来简单地加密网络连接，随后使用密码认证进行登录；另一种方法是人工生成一对公钥和私钥，通过生成的密钥进行认证，这样就可以在不输入密码的情况下登录。任何人都可以自行生成密钥。<strong>公钥需要放在待访问的电脑之中，而对应的私钥需要由用户自行保管</strong>。认证过程基于生成出来的私钥，但整个认证过程中私钥本身不会传输到网络中。</p></blockquote><h2 id="ssh-keygen命令：生成一对SSH密钥"><a href="#ssh-keygen命令：生成一对SSH密钥" class="headerlink" title="ssh-keygen命令：生成一对SSH密钥"></a>ssh-keygen命令：生成一对SSH密钥</h2><pre class="line-numbers language-Plain" data-language="Plain"><code class="language-Plain">$ ssh-key -t ed25519 -C &quot;your comment&quot;Generating public&#x2F;private ed25519 key pair.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>随后命令行会询问你存储密钥的位置：</p><pre class="line-numbers language-none"><code class="language-none">Enter file in which to save the key (&#x2F;home&#x2F;tsum&#x2F;.ssh&#x2F;id_ed25519):<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接回车，密钥将存放在默认位置<code>~/username/.ssh/</code>文件夹下。</p><p>随后要求设置一个密码：<code>Enter passphrase (empty for no passphrase):</code></p><p>连续敲两次回车，可以缺省不填。</p><h3 id="常用Flags："><a href="#常用Flags：" class="headerlink" title="常用Flags："></a>常用Flags：</h3><ul><li>-t  是Type的缩写，用于指定密钥类型。常见的有rsa、dsa、ed25519（都是加密算法）</li><li>-C （comment）表示提供一个注释，用于区分这个密钥。</li><li>-b 是bits的缩写， 用于指定密钥的长度。对于RSA密钥，最小要求768位，默认是2048位。4096指的是RSA密钥长度为4096位。DSA密钥必须恰好是1024位(FIPS 186-2 标准的要求)。</li></ul><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;用rsa算法生成一对4096位的密钥，注释是：your_email@example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最终生成的密钥：</p><p><img src="/2023/12/25/git/1703475200830-30.png" alt="img"></p><p>带有.pub后缀名的是公钥（可以理解为门锁），没有后缀的是私钥（理解为钥匙）。</p><h2 id="ssh-add命令：将私钥身份添加到-ssh-agent-身份验证代理"><a href="#ssh-add命令：将私钥身份添加到-ssh-agent-身份验证代理" class="headerlink" title="ssh-add命令：将私钥身份添加到 ssh-agent 身份验证代理"></a>ssh-add命令：将私钥身份添加到 ssh-agent 身份验证代理</h2><ol><li>开启 ssh-agent。默认情况下操作系统是不开启ssh-agent的。</li></ol><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ eval &quot;$(ssh-agent -s)&quot;Agent pid 470<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>把私钥添加到ssh-agent中。</li></ol><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ ssh-add ~&#x2F;.ssh&#x2F;id_ed25519Identity added: &#x2F;home&#x2F;tsum&#x2F;.ssh&#x2F;id_ed25519 (2207428258@qq.com)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以直接使用 </p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ ssh-addIdentity added: &#x2F;home&#x2F;tsum&#x2F;.ssh&#x2F;id_rsa (2207428258@qq.com)Identity added: &#x2F;home&#x2F;tsum&#x2F;.ssh&#x2F;id_ed25519 (2207428258@qq.com)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>直接添加所有的密钥</p><h3 id="常用Flags"><a href="#常用Flags" class="headerlink" title="常用Flags:"></a>常用Flags:</h3><ol><li><code>-L</code> :查看ssh-agent中所有身份的公钥 （可以cd去.ssh/文件夹对应着看看）</li></ol><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ ssh-add -Lssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDqSJWKpZQYJdCX2R+VtpH08wmhs&#x2F;7&#x2F;fwfe6cQ2Usq1j9ybeaS4Ic9RazAdZo50IM1PNf9cRSAPt3H1HZlCu71ti2eqdl+FKiHBjD&#x2F;acswianDhA59voQK48vUML&#x2F;3sXunfI5G3l5LhbVC7Z8h1tF&#x2F;MqzuBansN4C3SZGNglt6u9zIFDRRilCQ5tWWs33y5PwEprbkyQsma63VRYXh5XELU&#x2F;+n6iRTAVIQUG9e5LJmbvkmCO5EIsjsxIo5I20vvAtiRDQT+nzvs0hwVs2qqnWuuiEd081qA8vbuPv2gvC5thl2v3lgVQBJYjQqYCC5rkVcWg&#x2F;nP0&#x2F;E3yhwYEJuyejWR5jC5vgeygEnqm3OF5lxdC22xVhISOGk+DnqHV7S6IYNkadA5QoyLcQ5qxRIaGZ7iWmi04qT2es&#x2F;Syifw2GY0jX2j8IPA+OuoKqdCccLzjjrPfcFukjR&#x2F;DUuWbPwnFUeRrT7agO2G4UwYjjQbskmHbPiaiI+KbCbntMpX65cbw&#x2F;c&#x3D; 2207428258@qq.comssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIP6Gvxv4&#x2F;xKlG99&#x2F;F5ISmLFrmu7BjkpX5O35tDkXSCbz 2207428258@qq.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><code>-l</code>:列出ssh-agent 中所有身份的指纹（私钥）</li></ol><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ ssh-add -l3072 SHA256:S3GsFBitbn3rcMX8ky&#x2F;qK+bIuPZtY6N0ftns0NTaE1s 2207428258@qq.com (RSA)256 SHA256:tJJmHXRVP+NQGpMx&#x2F;7EyYCo8DgxTxkuhtt4xs&#x2F;FEJKw 2207428258@qq.com (ED25519)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以ssh-agent就像一把钥匙串。登陆其他主机的时候，会自动将所有钥匙（私钥）往钥匙孔（公钥）里插一遍。</p><ol><li><code>-d</code>：从ssh-agent 中删除密钥</li></ol><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ ssh-add -d ~&#x2F;.ssh&#x2F;id_rsa.pubIdentity removed: &#x2F;home&#x2F;tsum&#x2F;.ssh&#x2F;id_rsa.pub (2207428258@qq.com)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li><code>-D</code>： 从ssh-agent中删除<strong>所有</strong>密钥</li></ol><p>注意重启Ubuntu后也需要重新开启ssh-agent，并用ssh-add添加密钥。 </p><h3 id="将公钥添加到github账户中"><a href="#将公钥添加到github账户中" class="headerlink" title="将公钥添加到github账户中"></a>将公钥添加到github账户中</h3><p>首先查看公钥内容。</p><p><img src="/2023/12/25/git/1703475200802-1.png" alt="img"></p><p>当然也可以在.ssh文件夹下直接看</p><p><img src="/2023/12/25/git/1703475200802-2.png" alt="img"></p><p>复制到github上</p><p><img src="/2023/12/25/git/1703475200802-3.png" alt="img"></p><h3 id="测试是否连接成功"><a href="#测试是否连接成功" class="headerlink" title="测试是否连接成功"></a>测试是否连接成功</h3><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">ssh -T git@github.comThe authenticity of host &#39;github.com (20.205.243.166)&#39; can&#39;t be established.ECDSA key fingerprint is SHA256:p2QAMXNIC1TJYWeIOttrVc98&#x2F;R1BUFWu3&#x2F;LiyKgUfQM.Are you sure you want to continue connecting (yes&#x2F;no&#x2F;[fingerprint])? yesWarning: Permanently added &#39;github.com,20.205.243.166&#39; (ECDSA) to the list of known hosts.Hi Tsumgo! You&#39;ve successfully authenticated, but GitHub does not provide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一次连接可能会提示警告：</p><pre class="line-numbers language-none"><code class="language-none">The authenticity of host &#39;&#96;&#96;github.com&#96;&#96; (20.205.243.166)&#39; can&#39;t be established.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原因是，.ssh/文件夹下缺少了一个<code>known_hosts</code>文件。</p><p>如果当前主机为 SSH 客户端， ~/.ssh 目录下会有一个 known_hosts 文件，该文件用来记录连接过的远程主机。</p><p>此时选择yes即可，同时生成缺少的known_hosts文件</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>Git是一个分布式的版本控制系统。</p><h2 id="版本控制系统-VCSs"><a href="#版本控制系统-VCSs" class="headerlink" title="版本控制系统(VCSs)"></a><strong>版本控制系统</strong>(VCSs)</h2><p>是一类用于追踪源代码（或其他文件、文件夹）改动的工具。顾名思义，这些工具可以帮助我们管理代码的<strong>修改历史</strong>；不仅如此，它还可以让协作编码变得更方便。VCS通过一系列的<strong>快照（snapshot）</strong>将某个文件夹及其内容保存了起来，每个快照都包含了文件或文件夹的完整状态。同时它还维护了<strong>快照创建者的信息</strong>以及<strong>每个快照的相关信息</strong>等等。</p><h2 id="什么是工作区-working-directory-、缓存区-staging-area-和提交-commits"><a href="#什么是工作区-working-directory-、缓存区-staging-area-和提交-commits" class="headerlink" title="什么是工作区(working directory)、缓存区(staging area)和提交(commits)"></a>什么是工作区(working directory)、缓存区(staging area)和提交(commits)</h2><h3 id="工作区：在资源管理器中可见的所有文件。"><a href="#工作区：在资源管理器中可见的所有文件。" class="headerlink" title="工作区：在资源管理器中可见的所有文件。"></a>工作区：在资源管理器中可见的所有文件。</h3><p>对于Git来说，这部分文件又分为3种：</p><ul><li>Untracked： 一些新建的文件。使用git add命令可以让Git跟踪他们，变为Tracked。</li><li>Tracked：跟踪到的文件。已跟踪的文件即使改动后，依然处于Tracked状态。</li><li>ignored：忽略的文件。</li></ul><h3 id="缓存区：保存更改的中间过程"><a href="#缓存区：保存更改的中间过程" class="headerlink" title="缓存区：保存更改的中间过程"></a>缓存区：保存更改的中间过程</h3><p>在<code>git add</code>命令后，文件会进入缓冲区，防止误操作。</p><h3 id="提交：记录新版本到历史记录中。"><a href="#提交：记录新版本到历史记录中。" class="headerlink" title="提交：记录新版本到历史记录中。"></a>提交：记录新版本到历史记录中。</h3><p>在<code>git commit</code>命令后，新的版本会被记录。用git checkout命令可以随时回到过去的版本中。</p><h1 id="新建一个仓库（repository）"><a href="#新建一个仓库（repository）" class="headerlink" title="新建一个仓库（repository）"></a>新建一个仓库（repository）</h1><h3 id="什么是git-仓库？"><a href="#什么是git-仓库？" class="headerlink" title="什么是git 仓库？"></a>什么是git 仓库？</h3><blockquote><p>A <a href="https://bitbucket.org/product/code-repository">Git repository</a> is a virtual storage of your project. It allows you to save versions of your code, which you can access when needed. </p></blockquote><h3 id="Git-init：初始化文件夹，作为一个Git仓库（repo）"><a href="#Git-init：初始化文件夹，作为一个Git仓库（repo）" class="headerlink" title="Git init：初始化文件夹，作为一个Git仓库（repo）"></a>Git init：初始化文件夹，作为一个Git仓库（repo）</h3><p>首先，cd 至一个项目文件夹（我这里是TextEditor），这里用于存储整个项目所需要的代码。</p><p>使用以下命令初始化：</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ git initInitialized empty Git repository in D:&#x2F;Code&#x2F;TextEditor&#x2F;.git&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>.git 文件夹内包括所有git操作需要的文件。具体可参考：<a href="https://blog.csdn.net/mayfla/article/details/78653396">https://blog.csdn.net/mayfla/article/details/78653396</a></p><p>当然，为了利用好开源共享性，我们可以直接拷贝网络上已有的开源仓库。</p><h3 id="Git-clone-从远端下载仓库"><a href="#Git-clone-从远端下载仓库" class="headerlink" title="Git clone: 从远端下载仓库"></a>Git clone: 从远端下载仓库</h3><p>用法：</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">git clone &lt;repo URL&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于 Git 支持不同的网络传输协议，因此这里的 repo URL 可以有很多不同的写法。</p><ul><li><strong>http(s)://</strong> </li></ul><p>HTTP协议。例如： <code>https://github.com/alibaba/MNN.git</code></p><ul><li><strong>ssh://</strong></li></ul><p>SSH协议。一个SSH协议地址通常长这样：</p><blockquote><p>git@HOSTNAME:USERNAME/REPONAME.git</p></blockquote><p>HOSTNAME 主机名</p><p>USERNAME 用户名</p><p>REPONAME 仓库名称</p><p>一个例子是：</p><pre class="line-numbers language-none"><code class="language-none">git@github.com&#96;&#96;:alibaba&#x2F;MNN.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>本地路径（略）</li></ul><p>例：</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ git clone https:&#x2F;&#x2F;github.com&#x2F;alibaba&#x2F;MNN.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就可以在当前文件夹下得到MNN源码文件。</p><h1 id="Saving-Changes"><a href="#Saving-Changes" class="headerlink" title="Saving Changes"></a>Saving Changes</h1><p>当我写好了代码，如何让git记录我做出的更改？</p><p>在git的版本控制流程中，保存更改有两个步骤</p><p>下面以一个TextEditor项目为例。<code>MainTest.c</code>是主程序，<code>include/</code> 与 <code>libgraphics/</code>分别存储头文件及相应的.c文件</p><h2 id="Git-status：查看当前仓库的状态"><a href="#Git-status：查看当前仓库的状态" class="headerlink" title="Git status：查看当前仓库的状态"></a>Git status：查看当前仓库的状态</h2><p>单从它的功能就可以猜到，这将是我们使用git过程中使用最频繁的命令之一。</p><p><img src="/2023/12/25/git/1703475200803-4.png" alt="img"></p><p>git告诉我们，在<code>master</code>分支上，还没有任何提交记录。文件夹下有好多新文件没有被追踪到。</p><p>同时提醒我们，可以用<code>git add &lt;file&gt;</code> 命令，告诉git我将要提交哪些文件。</p><p>因此下一步：</p><h2 id="Git-add-添加被更改的文件到缓冲区（staging-area）"><a href="#Git-add-添加被更改的文件到缓冲区（staging-area）" class="headerlink" title="Git add: 添加被更改的文件到缓冲区（staging area）"></a>Git add: 添加被更改的文件到缓冲区（staging area）</h2><p>用法：</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ git add &lt;file&gt; -- 添加单个文件$ git add &lt;directory&gt; -- 添加整个文件夹下的新文件、有改动的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果我希望让仓库记录我所做的更改，首先使用：</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ git add MainTest.c include libgraphics<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令添加<code>MainTest.c</code> <code>include\</code>  <code>libgraphics\</code> 到git的缓冲区中。</p><p><img src="/2023/12/25/git/1703475200803-5.png" alt="img"></p><p>此处warning暂时不用关注。详情：<a href="https://blog.csdn.net/Babylonxun/article/details/126598477">https://blog.csdn.net/Babylonxun/article/details/126598477</a></p><p>注意，此时上述改动并没有被记录到仓库的历史记录中。这些文件被存放在了<strong>缓冲区。</strong></p><p>我们可以再查看一次当前仓库的状态。</p><p><img src="/2023/12/25/git/1703475200803-6.png" alt="img"></p><p>命令行提示我们，需要<code>提交</code>（commit）之后，这些改动才能生效。</p><p>附：可以用<code>git add -all</code>将所有的改动添加至缓冲区。</p><h2 id="Git-commit：记录并跟踪当前的改动。"><a href="#Git-commit：记录并跟踪当前的改动。" class="headerlink" title="Git commit：记录并跟踪当前的改动。"></a>Git commit：记录并跟踪当前的改动。</h2><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ git commit -m &quot;add .c .h files to the repo&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-m</code> 代表 message，用于描述此次提交的改动内容。</li></ul><p><a href="https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">如何写一个好看的提交信息</a></p><p><img src="/2023/12/25/git/1703475200803-7.png" alt="img"></p><p>此时，我们成功完成了一次提交。这次改动会被记录到仓库的历史记录中，方便我们随时查看。</p><p>commit操作还有更多可选flags：</p><ul><li>无参数：执行后会弹出文本编辑器，需要我们写本次的提交信息。</li><li><code>-a</code>：可以省去一步git add操作，直接将当前文件夹状态存储为一个快照。</li></ul><p>但是请注意，新增文件不会在此次commit范围内。它们仍然需要git add之后再提交。</p><blockquote><p>​           option -a/-all:  Tell the command to automatically stage files that have been           modified and deleted, but new files you have not told Git about are           not affected.</p></blockquote><ul><li><code>-am</code>：综合<code>-a</code>和<code>-m</code>的两个特性。</li></ul><p>例：</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ git commit -am &quot;add a new file&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>--amend</code>：追加更新上次commit。</li></ul><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ git add hello.py$ git commit --amend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时会弹出文本编辑器，发现内容是上次编辑的commit message。因此我们的更改是基于上次快照的修改，并没有创建一个新的快照。</p><p><img src="/2023/12/25/git/1703475200803-8.png" alt="img"></p><p>通过以上内容，不难发现：<code>git add</code> 与 <code>git commit</code>通常是一起使用的。</p><p>例如：</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ git add .$ git commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为当前文件夹的所有文件创建快照。</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ git add hello.py$ git commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为某个新文件/修改后的文件创建快照。</p><p>在实际合作过程中，我们通常将每一个改动的文件分别提交。这样虽然增加了操作繁琐度，但是有利于日后在庞大的更新中定位Bug。</p><h2 id="Git-Diff：查看差异"><a href="#Git-Diff：查看差异" class="headerlink" title="Git Diff：查看差异"></a>Git Diff：查看差异</h2><p>我们在<code>MainText.c</code>文件中做一些改动。</p><p><img src="/2023/12/25/git/1703475200803-9.png" alt="img"></p><p>在命令行中输入<code>git diff</code></p><p><img src="/2023/12/25/git/1703475200803-10.png" alt="img"></p><p>从命令行给出的反馈可以看出，git diff 比较了<strong>工作区（working</strong> <strong>directory**</strong>）<strong>与</strong>上一次提交（commit）**的差别。</p><p>用<code>git add</code>命令将它存储到缓冲区（staging area）。</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ git add MainTest.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>随后在工作区添加注释：</p><p><img src="/2023/12/25/git/1703475200803-11.png" alt="img"></p><p>在命令行中输入<code>git diff</code></p><p><img src="/2023/12/25/git/1703475200803-12.png" alt="img"></p><p>不难发现，这里<code>git diff</code>比较了<strong>工作区（working</strong> <strong>directory**</strong>）<strong>与</strong>缓冲区（staging area）**的差别。</p><p>我们首先解读上述内容。</p><ul><li><code>diff --git a/MainTest.c b/MainTest.c</code></li></ul><p>可以看出传给diff命令的两个文件。分别是 <code>a/MainTest.c</code> 和<code>b/MainTest.c</code> 分别是缓冲区（staging area）的文件、工作区（working directory）下的<code>MainTest.c</code>。</p><ul><li><code>index b68cee0..f1f0870 100644</code></li></ul><p>这里是一个哈希值，用于代表git中的一个对象。用处不大。</p><ul><li>图例</li></ul><p><img src="/2023/12/25/git/1703475200803-13.png" alt="img"></p><p>这部分表示：在下面的语句块中， <code>&#39;-&#39;</code>表示<code>a/MainTest.c</code>的改动，<code>&#39;+&#39;</code>表示 <code>b/MainTest.c</code>的改动。</p><ul><li>比较语句块</li></ul><p><img src="/2023/12/25/git/1703475200803-14.png" alt="img"></p><p>绿色部分以<code>&#39;+&#39;</code>开头，表示b/MainTest.c 中改动的内容</p><p>红色部分以<code>&#39;-&#39;</code>开头，表示a/MainTest.c 中改动的内容。</p><p>为什么两次<code>git diff</code>比较的内容不同？</p><p><strong>当工作区有改动，缓冲区为空，**</strong>diff<strong><strong>的对比是“</strong></strong>工作区<strong><strong>与</strong></strong>最后一次commit提交的仓库<strong>**的共同文件”；</strong></p><p><strong>当工作区有改动，缓冲区不为空，**</strong>diff<strong><strong>对比的是“</strong></strong>工作区<strong><strong>与</strong></strong>缓冲区<strong>**的共同文件”。</strong></p><h3 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h3><ul><li><code>--stat</code>：显示简略信息。</li></ul><p><img src="/2023/12/25/git/1703475200804-15.png" alt="img"></p><p>在上述情况下，添加<code>--stat</code>参数，会告诉我们有1个文件被修改，文件中有两处插入，一处删除。</p><ul><li><code>--cached</code> or <code>--staged</code>：显示缓冲区与最后一次commit(HEAD)之间的增删改。</li></ul><p>在上述条件下继续实验，首先进行一次<code>add</code>操作。</p><p><img src="/2023/12/25/git/1703475200804-16.png" alt="img"></p><p>第一次<code>git diff</code>：由于缓冲区不为空，比较工作区与缓冲区的文件差异。不输出。</p><p>第二次<code>git diff --cached</code>：比较缓冲区与上一次commit(HEAD)的文件差异。有输出。</p><p>更多用法详见博客：<a href="https://blog.csdn.net/wq6ylg08/article/details/88798254">https://blog.csdn.net/wq6ylg08/article/details/88798254</a></p><h2 id="gitignore文件"><a href="#gitignore文件" class="headerlink" title=".gitignore文件"></a>.gitignore文件</h2><p>实际的项目中，我们不希望某些文件被跟踪到（例如.o文件，占空间）。</p><p>我们只需要写一个<code>.gitignore</code>文件，就能实现这个需求。</p><p>我们需要用到类似正则表达式的<strong>通配符。</strong></p><p>看下面例子很好懂。</p><div class="table-container"><table><thead><tr><th>Pattern</th><th>Example matches</th><th>Explanation*</th></tr></thead><tbody><tr><td>**/logs</td><td>logs/debug.log logs/monday/foo.bar build/logs/debug.log</td><td>You can prepend a pattern with a double asterisk to match directories anywhere in the repository.</td></tr><tr><td>**/logs/debug.log</td><td>logs/debug.log build/logs/debug.log but not logs/build/debug.log</td><td>You can also use a double asterisk to match files based on their name and the name of their parent directory.</td></tr><tr><td>*.log</td><td>debug.log foo.log .log logs/debug.log</td><td>An asterisk is a wildcard that matches zero or more characters.</td></tr><tr><td>*.log !important.log</td><td>debug.log trace.log but not important.log logs/important.log</td><td>Prepending an exclamation mark to a pattern negates it. If a file matches a pattern, but also matches a negating pattern defined later in the file, it will not be ignored.</td></tr><tr><td><em>.log !important/</em>.log trace.*</td><td>debug.log important/trace.log but not important/debug.log</td><td>Patterns defined after a negating pattern will re-ignore any previously negated files.</td></tr><tr><td>/debug.log</td><td>debug.log but not logs/debug.log</td><td>Prepending a slash matches files only in the repository root.</td></tr><tr><td>debug.log</td><td>debug.log logs/debug.log</td><td>By default, patterns match files in any directory</td></tr><tr><td>debug?.log</td><td>debug0.log debugg.log but not debug10.log</td><td>A question mark matches exactly one character.</td></tr><tr><td>debug[0-9].log</td><td>debug0.log debug1.log but not debug10.log</td><td>Square brackets can also be used to match a single character from a specified range.</td></tr><tr><td>debug[01].log</td><td>debug0.log debug1.log but not debug2.log debug01.log</td><td>Square brackets match a single character form the specified set.</td></tr><tr><td>debug[!01].log</td><td>debug2.log but not debug0.log debug1.log debug01.log</td><td>An exclamation mark can be used to match any character except one from the specified set.</td></tr><tr><td>debug[a-z].log</td><td>debuga.log debugb.log but not debug1.log</td><td>Ranges can be numeric or alphabetic.</td></tr><tr><td>logs</td><td>logs logs/debug.log logs/latest/foo.bar build/logs build/logs/debug.log</td><td>If you don’t append a slash, the pattern will match both files and the contents of directories with that name. In the example matches on the left, both directories and files named logs are ignored</td></tr><tr><td>logs/</td><td>logs/debug.log logs/latest/foo.bar build/logs/foo.bar build/logs/latest/debug.log</td><td>Appending a slash indicates the pattern is a directory. The entire contents of any directory in the repository matching that name – including all of its files and subdirectories – will be ignored</td></tr><tr><td>logs/ !logs/important.log</td><td>logs/debug.log logs/important.log</td><td>Wait a minute! Shouldn’t logs/important.log be negated in the example on the left  Nope! Due to a performance-related quirk in Git, you can not negate a file that is ignored due to a pattern matching a directory</td></tr><tr><td>logs/**/debug.log</td><td>logs/debug.log logs/monday/debug.log logs/monday/pm/debug.log</td><td>A double asterisk matches zero or more directories.</td></tr><tr><td>logs/*day/debug.log</td><td>logs/monday/debug.log logs/tuesday/debug.log but not logs/latest/debug.log</td><td>Wildcards can be used in directory names as well.</td></tr><tr><td>logs/debug.log</td><td>logs/debug.log but not debug.log build/logs/debug.log</td><td>Patterns specifying a file in a particular directory are relative to the repository root. (You can prepend a slash if you like, but it doesn’t do anything special.)</td></tr></tbody></table></div><p>例如，我希望忽略文件夹中由Visual Studio自动生成的文件。</p><p><img src="/2023/12/25/git/1703475200804-17.png" alt="img"></p><p>即此处<code>.vs/ x64/  .sln .vcxproj</code>等等文件。</p><p>在.gitignore文件中保存如下内容：</p><p><img src="/2023/12/25/git/1703475200804-18.png" alt="img"></p><p>可以发现资源管理器中相应文件变成灰色。</p><p>再用git status 查看当前工作区状态。</p><p><img src="/2023/12/25/git/1703475200804-19.png" alt="img"></p><p>原来一长串的Untracked files不见了。 最后我们只需要将.gitignore 提交即可。</p><h1 id="Undoing-Changes"><a href="#Undoing-Changes" class="headerlink" title="Undoing Changes"></a>Undoing Changes</h1><h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert "></a>git revert <commit></commit></h2><p>如果我们想要回退去修改版本二（有bug），但又不想删除版本三，可以使用revert命令。</p><p><img src="/2023/12/25/git/1703475200804-20.png" alt="img"></p><p>Git revert会新建一个版本四，其中包含了修改后的版本二与版本三。</p><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset "></a>git reset <commit></commit></h2><p>git reset的作用是:修改HEAD的位置，即将HEAD指向的位置改变为之前存在的某个版本，如下图所示，假设我们要回退到版本一：</p><p><img src="/2023/12/25/git/1703475200804-21.png" alt="img"></p><p><strong>适用场景：</strong> 如果想恢复到之前某个提交的版本，且那个版本之后提交的版本我们都不要了，就可以用这种方法。</p><h1 id="Inspecting-a-repository"><a href="#Inspecting-a-repository" class="headerlink" title="Inspecting a repository"></a>Inspecting a repository</h1><h2 id="Git-log：显示历史日志"><a href="#Git-log：显示历史日志" class="headerlink" title="Git log：显示历史日志"></a>Git log：显示历史日志</h2><p><img src="/2023/12/25/git/1703475200804-22.png" alt="img"></p><p>在上面的项目中我们进行了两次commit。此处列出了commit message、修改人及其电子邮箱。</p><p>commit 31de595cf3461e6bf01ca984fd8881ce849c627a (HEAD -&gt; master)</p><p>黄色部分为一串Hash值，git以此来区分不同的commits。</p><p>蓝色的HEAD是一个游标，表示当前工作区内展现的是master分支的内容。</p><p>这样子的日志显得很杂乱。我们有办法让日志更好看一点。</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ git log --all --graph --oneline --decorate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令使用有向无环图展现一个仓库的更新日志。与上面的命令比起来更加赏心悦目。</p><p>其他选项：</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ git log -n &lt;limit&gt;  只显示最新的 &lt;limit&gt; 次提交$ git log --author&#x3D;&quot;&lt;pattern&gt;&quot;   查看特定作者的提交，使用正则表达式筛选$ git log --grep&#x3D;&quot;&lt;pattern&gt;&quot;   用正则表达式筛选commit message$ git log &lt;file&gt;  筛选包含特定文件的提交<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Syncing"><a href="#Syncing" class="headerlink" title="Syncing"></a>Syncing</h1><h2 id="Git-remote：与远程仓库联系"><a href="#Git-remote：与远程仓库联系" class="headerlink" title="Git remote：与远程仓库联系"></a>Git remote：与远程仓库联系</h2><ul><li><code>git remote</code> :列出远端。</li></ul><p>git会为通过<code>git clone</code> 命令下载到本地的仓库建立与源仓库的联系。</p><p>MNN是从网上克隆到本地的仓库。</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">PS D:\Code\MNN&gt; git remote -vorigin  https:&#x2F;&#x2F;github.com&#x2F;Tsumgo&#x2F;MNN.git (fetch)origin  https:&#x2F;&#x2F;github.com&#x2F;Tsumgo&#x2F;MNN.git (push)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>-v</code>表示verbose。git把源仓库的地址 <a href="https://github.com/Tsumgo/MNN.git">https://github.com/Tsumgo/MNN.git</a> 称为<code>origin</code>。</p><p><code>git remote add &lt;name&gt; &lt;url&gt;</code>：添加一个远端。</p><p>我们在github上新建一个项目，并复制该项目的SSH地址。（不用HTTP协议，是因为SSH能免密码）</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">PS D:\Code\TextEditor&gt; git remote add origin git@github.com:Tsumgo&#x2F;TextEditor.gitPS D:\Code\TextEditor&gt; git remoteorigin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那么当前仓库就与一个叫origin的仓库建立了联系。</p><p>接下来我们将本地项目上传至远端仓库。</p><h2 id="Git-push：将对象传送至远端仓库"><a href="#Git-push：将对象传送至远端仓库" class="headerlink" title="Git push：将对象传送至远端仓库"></a>Git push：将对象传送至远端仓库</h2><pre class="line-numbers language-none"><code class="language-none">git push &lt;remote&gt; &lt;local branch&gt;:&lt;remote branch&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><remote> 表示远端仓库</remote></p><p><local branch> 表示本地更新好的分支。</local></p><p><remote branch> 希望更新的表示远端分支。</remote></p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ git push origin master:master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2023/12/25/git/1703475200804-23.png" alt="img"></p><p>在github上，我们就能看到本地文件在远端主机上更新了。</p><p>需要注意的是，<strong>每次在分支上**</strong>push<strong>**本地文件时应当首先拉去远程仓库的最新版本。</strong></p><h2 id="Git-branch-amp-git-checkout"><a href="#Git-branch-amp-git-checkout" class="headerlink" title="Git branch &amp; git checkout"></a>Git branch &amp; git checkout</h2><p>一个项目可以有多个分支同时开发。下面使用<code>git branch</code> 、<code>git checkout</code> 命令模拟对不同分支的管理。</p><p><img src="/2023/12/25/git/1703475200804-24.png" alt="img"></p><h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h3><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ git branch &lt;branch&gt;     # 创建名为&lt;branch&gt;的分支$ git branch -d &lt;branch&gt;  # 删除&lt;branch&gt;分支。如果当前分支有未合并的更改则不会删除。$ git branch -D &lt;branch&gt;  # 强制删除&lt;branch&gt;分支。$ git branch -m &lt;branch&gt;  # 重命名当前分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Git-checkout-切换分支"><a href="#Git-checkout-切换分支" class="headerlink" title="Git checkout: 切换分支"></a>Git checkout: 切换分支</h3><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ git checkout &lt;commit&gt; # 切换到其他分支<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中<commit>可以使用master等已命名的名字替换，或者用commit哈希值的前7位。</commit></p><h3 id="建立两个分支"><a href="#建立两个分支" class="headerlink" title="建立两个分支"></a>建立两个分支</h3><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ git branch cat  # 创建cat 分支$ git branch dog  # 创建dog 分支# 在文件中做一些修改。增加cat函数$ git checkout cat 切换到cat分支$ git add MainTest.c$ git commit -m &quot;add function cat&quot;$ git log --all --graph --oneline --decorate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到此时仓库的每一个历史提交。</p><p><img src="/2023/12/25/git/1703475200804-25.png" alt="img"></p><p>游标HEAD指向cat分支。同时我们在工作区查看MainTest.c，发现存储的确实是cat分支的内容。</p><p><img src="/2023/12/25/git/1703475200804-26.png" alt="img"></p><p>而master、dog分支停留在上一个commit中，还未更改。使用 </p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ git checkout dog<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换到dog 分支。</p><p><img src="/2023/12/25/git/1703475200804-27.png" alt="img"></p><p>并在工作区中查看<code>MainTest.c</code>，已经回到了上一次提交的状态。</p><p><img src="/2023/12/25/git/1703475200804-28.png" alt="img"></p><p><code>Git pull &lt;remote&gt;</code>：拉取远端仓库特定分支的最新版本。</p><h2 id="Git-pull-git-fetch-git-pull-与远端仓库同步"><a href="#Git-pull-git-fetch-git-pull-与远端仓库同步" class="headerlink" title="Git pull (git fetch + git pull) 与远端仓库同步"></a>Git pull (git fetch + git pull) 与远端仓库同步</h2><p><img src="/2023/12/25/git/1703475200804-29.png" alt="img"></p><p>我希望下载远端仓库的某些分支到本地进行开发，需要经历以上过程。</p><p><code>Git fetch</code> 命令下载远端仓库的指定文件，但它们并没有进入本地仓库，只是在本地有个副本</p><p><code>Git merge</code> 命令可以将远程仓库的副本加入到本地仓库中，其间需要程序员主动考虑合并细节。</p><p><code>Git pull</code>相当于上述两个步骤的合并。</p><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">$ git pull &lt;remote&gt; &lt;remote branch&gt;:&lt;local branch&gt; # 将远程主机的分支拉过来 与&lt;local branch&gt;合并。$ git pull &lt;remote&gt; &lt;remote branch&gt; # 如果与当前分支合并，可以省略本地分支。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="Work-Flows"><a href="#Work-Flows" class="headerlink" title="Work Flows"></a>Work Flows</h1><h2 id="Feature-Branch-Workflow"><a href="#Feature-Branch-Workflow" class="headerlink" title="Feature Branch Workflow"></a>Feature Branch Workflow</h2><ol><li>首先，从主分支（master）创建一个新分支，命名为“feature/xyz”，其中“xyz”代表正在开发的特定功能。</li><li>接下来，在该分支上进行所有与特性相关的更改和提交。</li><li>当特性开发完成时，将其合并回主分支（master）。在合并之前，应该尽可能确保代码的稳定性，并通过测试确保它的质量。</li><li><p>如果需要对特性进行更改或修复，可以在feature分支上继续进行更改和提交，然后将其再次合并到主分支。</p><p>这种工作流程的好处在于，它允许开发人员独立地处理不同的功能开发，而不会影响其他特性或主分支的稳定性。它也使得跟踪特性开发进度变得更加容易，并且有助于团队成员更好地协作。</p></li></ol><h2 id="Forking-Workflow"><a href="#Forking-Workflow" class="headerlink" title="Forking Workflow"></a>Forking Workflow</h2><ol><li>开发人员首先从公共代码库中fork一个副本到自己的GitHub账户下。</li><li>然后，在其个人副本上创建一个新的分支，以便在其中进行所需的更改和提交。</li><li>当对代码进行了更改并已准备好合并到主代码库时，开发人员将新分支推送到他们的个人副本，并创建一个“pull request”（PR）以请求将更改合并回主代码库。</li><li>在进行代码审查、测试和合并之前，其他团队成员或贡献者可以在PR中提出评论或建议修改。</li><li>一旦所有必要的更改都已审核并通过测试，开发人员就可以将更改合并回主代码库。</li></ol><p>这种工作流程的优点在于，它允许开发人员在不影响公共代码库的情况下进行独立的开发工作，并且保持原始代码库的稳定性。它也使得跨多个开发团队协作变得更加容易，因为每个人都可以在自己的个人副本上工作，并通过pull request将更改合并回主代码库。</p>]]></content>
      
      
      <categories>
          
          <category> Blogs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>沙盘OH卡之旅</title>
      <link href="/2023/12/01/sha-pan-oh-qia-zhi-lu/"/>
      <url>/2023/12/01/sha-pan-oh-qia-zhi-lu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>记录在紫金港心理中心的长期团辅历程</p></blockquote><p>前面的都忘光了，有空再补</p><h2 id="上上一周"><a href="#上上一周" class="headerlink" title="上上一周"></a>上上一周</h2><blockquote><p>英雄之旅</p></blockquote><p>英雄叙事很多时候有着固定的故事结构。好莱坞的爆米花电影、各种神话故事都会有着类似的结构。一个叫<strong>约瑟夫·坎贝尔</strong>的神话学家专门研究了人类诸多的神话，最后发现，这些神话里的英雄，都有着相似的“成神”路径。</p><h3 id="第一幕-出发"><a href="#第一幕-出发" class="headerlink" title="第一幕 出发"></a>第一幕 出发</h3><ol><li>普通的世界</li><li>冒险的召唤</li><li>对冒险的拒绝</li><li>与智者的相遇，见导师</li><li>穿越第一个极限</li></ol><h3 id="第二幕-被传授奥秘"><a href="#第二幕-被传授奥秘" class="headerlink" title="第二幕 被传授奥秘"></a>第二幕 被传授奥秘</h3><ol><li>考验、伙伴、敌人</li><li>接近深层的洞穴</li><li>严峻的考验</li><li>得到嘉奖</li></ol><h3 id="第三幕-归来"><a href="#第三幕-归来" class="headerlink" title="第三幕 归来"></a>第三幕 归来</h3><ol><li>回去的路</li><li>复活</li><li>携万能药回归</li></ol><p>选择8张欧卡，分别对应 聆听召唤第一幕 出发</p><ol><li>普通的世界</li><li>冒险的召唤</li><li>对冒险的拒绝</li><li>与智者的相遇，见导师</li><li>穿越第一个极限</li></ol><h3 id="第二幕-被传授奥秘-1"><a href="#第二幕-被传授奥秘-1" class="headerlink" title="第二幕 被传授奥秘"></a>第二幕 被传授奥秘</h3><ol><li>考验、伙伴、敌人</li><li>接近深层的洞穴</li><li>严峻的考验</li><li>得到嘉奖</li></ol><h3 id="第三幕-归来-1"><a href="#第三幕-归来-1" class="headerlink" title="第三幕 归来"></a>第三幕 归来</h3><ol><li>回去的路</li><li>复活</li><li>携万能药回归</li></ol><p><img src="/2023/12/01/sha-pan-oh-qia-zhi-lu/12.x.jpg" alt></p><p>选择五张欧卡，构建一个英雄故事，分别对应：</p><p><strong>聆听召唤、遭遇困境、获得帮助、行动与转变、故事结局</strong>这几个故事环节，与大家分享。</p><blockquote><p>在我的心中，我的妈妈就是我的英雄。</p></blockquote><h2 id="上一周"><a href="#上一周" class="headerlink" title="上一周"></a>上一周</h2><blockquote><p>存在主义四个命题</p></blockquote><p>有空在看书…</p><p><a href="https://zhuanlan.zhihu.com/p/69609702">存在主义的四个核心命题：死亡、自由、孤独与无意义 - 知乎 (zhihu.com)</a></p><p>可惜缺席两人，PP和可意请假了。</p><h2 id="12-1"><a href="#12-1" class="headerlink" title="12/1"></a>12/1</h2><p><img src="/2023/12/01/sha-pan-oh-qia-zhi-lu/12.1-3.jpg" alt></p><p>第一次用空白字卡，引导者规定字卡主题，参与者各自抽卡描述主题相关的故事或思考。</p><p>今天的主题是<strong>自然</strong>、<strong>生命</strong>。</p><p>可意请假了。</p><hr><blockquote><p>给陌生人给予好处，我们很轻松的就能得到感谢地回报；反之给亲密的人给予关心，往往更难以被察觉。所以人们是不是对内倾向于冷漠，对外反而热情          ——  田螺</p><p>喜欢撕叶片，然后只剩下茎脉        —— 田螺</p><p>每年除夕都和家人去登山            ——  PP</p><p>篝火晚会也不错                —— 土豆</p><p>《活在当下和死亡》        —— 田螺</p><p>《自由是生命力的一部分》            ——  土豆</p></blockquote><ul><li>发现了心理中心超棒的自修区</li></ul><p><img src="/2023/12/01/sha-pan-oh-qia-zhi-lu/12.1-1.jpg" alt></p><ul><li>卉新园艺的花比我寝室开的好。</li></ul><p><img src="/2023/12/01/sha-pan-oh-qia-zhi-lu/12.1-2.jpg" alt></p><h2 id="12-15"><a href="#12-15" class="headerlink" title="12/15"></a>12/15</h2><blockquote><p>尾声。</p></blockquote><p>一开始就有猜到，今天会以欧卡为载体互相赠送礼物。礼物是开启一段关系很好的媒介，同时也可以成为告别的信物。</p><ul><li>请选择一张欧卡来代表我们对这个长程团体的印象</li><li>各选一张表达我们对每位成员的印象</li><li>选一张代表我们自己的改变</li><li>选一张赠送给每个成员</li></ul><p>最后的最后，我们还很惊喜地收到了来自老师对成员的印象以及一封短信。它们是对六周团辅的重拾与回顾。每个人的信封都独一无二，因为我们每个成员都对外表达着不同的人生轨迹与生活方式。</p><blockquote><p>一封信能送得如此走心，倍受感动</p></blockquote><p><img src="/2023/12/01/sha-pan-oh-qia-zhi-lu/12-15.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> Nonsense </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 团辅 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Debug Logs</title>
      <link href="/2023/11/24/python-qi-yi-cuo-wu/"/>
      <url>/2023/11/24/python-qi-yi-cuo-wu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python">WARNING<span class="token punctuation">:</span> Retrying <span class="token punctuation">(</span>Retry<span class="token punctuation">(</span>total<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> connect<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> read<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> redirect<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span> after connection broken by <span class="token string">'ProxyError('</span>Cannot connect to proxy<span class="token punctuation">.</span><span class="token string">', OSError(0, '</span>Erro<span class="token string">r'))'</span><span class="token punctuation">:</span> <span class="token operator">/</span>simple<span class="token operator">/</span>h5py<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关掉代理就行。不知道原理</p>]]></content>
      
      
      <categories>
          
          <category> Nonsense </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Write a perfect GPT prompt</title>
      <link href="/2023/09/21/how-to-write-a-perfect-gpt-prompt/"/>
      <url>/2023/09/21/how-to-write-a-perfect-gpt-prompt/</url>
      
        <content type="html"><![CDATA[<h1 id="How-to-write-a-perfect-GPT-prompt"><a href="#How-to-write-a-perfect-GPT-prompt" class="headerlink" title="How to write a perfect GPT prompt"></a>How to write a perfect GPT prompt</h1><h1 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h1><h2 id="English"><a href="#English" class="headerlink" title="English"></a>English</h2><p>GPT使用英文语料训练。尽管它也能处理中文提问，但是在翻译的过程中会出现语义损失，导致输出结果偏差。</p><p>不过一般情况下用中文完全没问题。</p><h2 id="Be-specific-with-your-rerquest"><a href="#Be-specific-with-your-rerquest" class="headerlink" title="Be specific with your rerquest"></a>Be specific with your rerquest</h2><ul><li><p>清楚地罗列信息/给出要求</p></li><li><p>避免模棱两可的词汇</p></li></ul><blockquote><p>“Tell me about climate change.”</p><p>“What are the primary <strong>causes</strong> of climate change, and what are some potential <strong>solutions</strong> to mitigate its effects?”</p></blockquote><h2 id="Provide-context-and-background-info"><a href="#Provide-context-and-background-info" class="headerlink" title="Provide context and background info."></a>Provide context and background info.</h2><p>提供<strong>上下文</strong>和足够的<strong>背景信息</strong>。</p><p>如果你想要转行/专业，问问GPT的意见。</p><blockquote><p>Prompt: I have 3 years of experience as a software developer. Now I got bored with coding and want to transition to another career. My education qualifications are B. Tech in computer science, and I am well-versed in understanding the business side of software as well. Suggest a list of career options that are easy for me to transition.</p></blockquote><h2 id="Use-explicit-constraints-and-guidelines"><a href="#Use-explicit-constraints-and-guidelines" class="headerlink" title="Use explicit constraints and guidelines"></a>Use explicit constraints and guidelines</h2><p>使用明确的约束条件。例如：</p><ul><li><p>标准化输出</p><ul><li>json、html类型输出（一般情况下用不到）</li></ul></li><li><p>字数限制</p></li></ul><p>我需要写一份读书报告：</p><blockquote><p> Prompt: “Please provide a summary of the book “The Republic” by Plato <strong>in 100-150 words</strong>, <strong>focusing on the main points and conclusions.</strong>”</p></blockquote><p>最后一个提示词能让GPT的输出有更多干货</p><h2 id="Start-with-an-action-word"><a href="#Start-with-an-action-word" class="headerlink" title="Start with an action word"></a>Start with an action word</h2><p>祈使句往往会有更好的效果。</p><blockquote><p>Can you tell me how to become a content marketer?</p><p>Create a career plan to become a content marketer in 2023</p></blockquote><h1 id="Advanced！"><a href="#Advanced！" class="headerlink" title="Advanced！"></a>Advanced！</h1><h2 id="Let’s-play-a-game"><a href="#Let’s-play-a-game" class="headerlink" title="Let’s play a game"></a>Let’s play a game</h2><blockquote><p><strong>Let’s play a game.</strong> Act as  <strong>a talented entrepreneur</strong>, with IQlevel of Elon Musk, Einstein, Tesla combined. I will be asking you many business questions <strong>you have to answer all of whose</strong>.</p></blockquote><p>官网把这类提示词叫做 system message，我不太会翻译。概括地来说，是和GPT玩角色扮演游戏。</p><blockquote><p>Prompt：<strong>You are an assistant knowledgeable about gardening.</strong> Help me understand how to grow sunflowers successfully.</p></blockquote><p><del>刚好在寝室里种向日葵</del></p><blockquote><p>Prompt: “<strong>I want you to act as a personal trainer, who can create customized fitness programs, provide exercise instructions, and offer guidance on healthy lifestyle choices</strong>. Assess my current fitness level, goals, and preferences to develop a tailored workout plan that includes strength training, cardiovascular exercises, and flexibility routines. Share tips on proper exercise form, injury prevention, and progressive overload to ensure continuous improvement. Offer advice on nutrition, hydration, and rest to support my overall well-being. My first request is ‘Design a 4-week workout plan for me to improve my overall strength and endurance, considering my limited access to gym equipment.’”</p></blockquote><p>太高级了，免费私教</p><blockquote><p>Prompt: <strong>You are a renowned chef</strong>, and I am your apprentice. <strong>Teach</strong> me how to prepare a gourmet pasta dish with a unique twist.</p></blockquote><p>让GPT教我做饭</p><h2 id="反复追问"><a href="#反复追问" class="headerlink" title="反复追问"></a>反复追问</h2><p>因为GPT拥有一定的上下文关联能力，适当的追问能帮助我们得到更好的回答。</p><h2 id="Step-by-step：给出分步提问-分步回答"><a href="#Step-by-step：给出分步提问-分步回答" class="headerlink" title="Step by step：给出分步提问/分步回答"></a>Step by step：给出分步提问/分步回答</h2><p>先…然后回答问题….</p><blockquote><p>Prompt: “Please think through the advantages and disadvantages of solar energy, and then provide a balanced assessment of its potential as a renewable energy source.”</p></blockquote><p>请GPT同学分点作答</p><blockquote><p>Prompt: “What are the first <strong>three steps</strong> in building a website from scratch?”</p></blockquote><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://gptbot.io/master-chatgpt-prompting-techniques-guide/">Mastering ChatGPT: How to Craft Effective Prompts (Full Guide + Examples) (gptbot.io)</a> </p><p><a href="https://gptbot.io/chatgpt-prompts/">ChatGPT Prompts Library: 250+ Ready-to-Use Prompts (gptbot.io)</a>   好用的Prompt模板</p><p><a href="https://platform.openai.com/docs/guides/gpt-best-practices">GPT best practices - OpenAI API</a> TO_READ</p><h2 id="如何炼丹"><a href="#如何炼丹" class="headerlink" title="如何炼丹"></a>如何炼丹</h2><p><img src="/2023/09/21/how-to-write-a-perfect-gpt-prompt/Myblog\source\_posts\9-21How-to-Write-a-perfect-GPT-prompt\1.jpg" alt></p><p>深呼吸，一步步思考，你也可以的。</p>]]></content>
      
      
      <categories>
          
          <category> Blogs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>余华《活着》</title>
      <link href="/2023/09/03/yu-hua-huo-zhao/"/>
      <url>/2023/09/03/yu-hua-huo-zhao/</url>
      
        <content type="html"><![CDATA[<p>很喜欢像《活着》这种，读来平实而又有张力的文字：不会晦涩难懂，不会寻章摘句，读来仿佛在与满脸沧桑的福贵对话，而非流水账一般的口水句。</p><blockquote><p>来了兴致，找度娘问了问“张力”一词，果然收获颇丰。</p><p><a href="https://www.zhihu.com/tardis/bd/ans/2081354820?source_id=1001">什么是文字的张力？ (zhihu.com)</a></p><p>万一有空还可以研究一下…</p></blockquote><p>可能是翻译的原因，外国文学里就很少有体会到这种魅力。奥雷里亚诺 · 布恩迪亚上校也大概不会理解他的名字为什么这么难记。</p><h2 id="悲剧迭起"><a href="#悲剧迭起" class="headerlink" title="悲剧迭起"></a>悲剧迭起</h2><p>福贵的一生可悲可泣可叹。赌博败光三代家产的光辉事迹比任何爽文都要惊心动魄，接踵而至的又是丧父、丧子、丧女儿、丧女婿，丧孙子。</p><p>孙子苦根之死有勉强之意——吃豆子噎死了。</p>]]></content>
      
      
      <categories>
          
          <category> Nonsense </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书摘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>El Amor En Los Tiempos Del Colera 摘抄</title>
      <link href="/2023/08/21/el-amor-en-los-tiempos-del-colera/"/>
      <url>/2023/08/21/el-amor-en-los-tiempos-del-colera/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不可否认，苦杏仁的气味总是让他想起爱情受阻后的命运。</p></blockquote><ul><li><p>她不会流一滴眼泪，不会浪费自己的余生，在慢火煮炖的回忆的蛆肉汤中煎熬，不会把自己活活埋葬在四面墙壁之间，成日为自己缝制寿衣</p></li><li><p>在一月份的一个下午，姑妈将手中的活计放在椅子上，把侄女独自留在门廊旁边，留在了那散落一地的黄色杏树叶之间。</p></li><li><p>费尔明娜 达萨没有看他，也没有停下手中的刺绣，但她的决定却像打开了一道门缝，足以让整个世界通过。</p><p>“请您每天下午都到这里来，”她对他说，“等待我换椅子的时刻。”</p></li><li><p>事实上，这些信对她而言只是一种消遣，用来维持炭火不灭，但不必把手伸到火中，而佛罗伦蒂诺·阿里萨却在信中的每一行把自己燃烧殆尽。</p></li><li><p>事实上，她一直把山茶花的一来一回当做一种调情，而从未视为决定自己命运的十字路口。</p></li><li><p>于是，她和佛罗伦蒂诺·阿里萨之间的电报往来不再是堆砌着憧憬和虚幻的山盟海誓，而变得有条理，实实在在，且比以往任何时候都更加频繁。</p></li><li><p>​          她回过头，在距离自己的双眼两柞远的地方，她看见了他那冰冷的眼睛、青紫色的面庞和因爱情而变得僵硬的双唇。他离她那么近，就像在子时弥撒躁动的人群中看到他的那次一样。但与那时不同，此刻她没有感到爱情的震撼，而是失足坠入了失望的深渊</p><p>​            在那一瞬间，她恍然大悟，原来自己对自己撒了一个弥天大谎。她如此惊慌地自问，怎么会如此残酷地让那样一个幻影在自己的心间占据了那么长时间。她只想出了一句话：“我的上帝啊！这个可怜的人！”</p><p>​            佛罗伦蒂诺·阿里萨冲她笑了笑，试图对她说点什么，想跟她一起走，但她挥了挥手，把他从自己的生活中抹掉了——</p><p>​            “不，请别这样。”她对他说，“忘了吧。”</p></li><li><p>或许他（医生）的为人与他那庄重的外表差距甚远，或许他在出诊时喜欢信口开河，就像他那个阶层的很多人那样，到处吹嘘自己幻想出来的对她的征服。</p></li><li><p>当他用现实中认识的人去代替小说中想像的任务时，那些反复度过多遍的情节又恢复了最初的魔力。</p></li><li><p>人不是从娘胎里一出来就一成不变的，相反，生活会逼迫他一次又一次地脱胎换骨。</p></li><li><p>在那一瞬间，她（费尔明娜）定会回想起小花园杏树下刺绣的那一个个下午，想起信中那些干枯的栀子花的芳香，想起清晨风中那曲只属于两人的花冠女生的华尔兹。</p></li><li><p>谁都无法解释他哪里来的时间衰老</p></li><li><p>她（萨拉·诺列加）辩解说，爱情，首先是一种本能，“要么生下来就会，要么永远不会。”</p></li><li><p>究竟哪一种状态是爱情，是床上的颠鸾倒凤，还是星期日下午的瓶颈。萨拉·诺列加用一个简单的结论让他平静下来，那就是：凡赤身裸体干的事情都是爱。她说：“灵魂之爱在腰部以上，肉体之爱在腰部以下。”</p></li><li>他（阿里萨）的过去唯一的参照点就是与费尔明娜·达萨短暂的爱情，只有和她相关的事情才能让他找到岁月的支点。所以，看见燕子停在电线杆上的那个下午，他从最久远的记忆开始回顾自己的过往，回顾了一桩桩猎艳的情事，回顾了为了爬上发号施令的位置曾跃过的无数处暗礁，以及种种数都数不清的往事，而这一切皆由他那刻骨的决心而起：他誓要让费尔明娜·达萨属于他，而他也属于她，这个决心高于一切，所向披靡。可直到这一刻，他才发现自己的一生几乎都已经过去了。</li><li>他们生活在两个背道而驰的世界里。</li><li>但她的悲哀，抑或是这个镇子的悲哀在于，后来的她永远也想不起它真实的模样，只记得见到它之前她脑海中想像的样子。</li><li>他没有回头看，但她却如在眼前，而银幕上演出的那一连串历史性灾难他全然没有放在心上。他陶醉于从他灵魂深处传来的<strong>杏果的芬芳</strong>，急切地想知道她如何看待电影中那些陷入爱情中的女人，是否她们的爱比现实中的爱少一些痛苦。</li><li>他没有意识到，他已经在开始拖延自己的种种问题，期盼死亡能解决一切。</li><li>“一个世纪以前，人们毁掉了我和这个可怜男人的生活，因为我们太年轻，现在，他们又想在我们身上故技重施，因为我们太老了。”    “让他们见鬼去吧”她说，“如果说我们这些寡妇有什么优势的话，那就是再也没人能对我们发号施令了。”</li><li>是的，他（费尔明娜之子）也一样，同他的妹妹一样，认为爱情到了一定年龄就变得不体面了。</li><li><p>无论是佛罗伦蒂诺还是费尔明娜，都<strong>没有</strong>注意到他们彼此间是多么情投意合：她帮他灌肠，在他之前起床为他刷洗净他睡觉前放在杯中的假牙；她总找不着眼镜的问题也解决了，因为她看书和缝补时可以带上他的眼镜。一天早上她醒来，见他正在湖南中钉衬衫上的纽扣。在他说出那句“一个男人需要两个妻子”的仪式性话语之前，她赶忙把活抢到自己手中。而她唯一需要他做的，只是给她拔火罐消除背痛。</p></li><li><p>“我们一直走，一直走，重回黄金港！”</p><p>“您此话当真？“<br>“从我出生起，”佛罗伦蒂诺·阿里萨说，“就没说过一件不当真的事。”</p><p>船长看了看费尔明娜·达萨，在她睫毛上看到初霜的闪光。然后，他又看了看佛罗伦蒂诺·阿里萨，看到的是他那不可战胜的决心和勇敢无畏的爱。这份迟来的顿悟使他吓了一跳，<strong>原来是生命，而非死亡，才是没有止境的。</strong></p></li></ul><p>圣修伯理在风沙星辰里面的一段话，爱并不存在于两个人的互相凝视，而是存在于两个人一起望向外在的同一方向</p>]]></content>
      
      
      <categories>
          
          <category> Nonsense </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书摘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五星笔记法</title>
      <link href="/2023/08/17/wu-xing-bi-ji-fa/"/>
      <url>/2023/08/17/wu-xing-bi-ji-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="预判核心内容"><a href="#预判核心内容" class="headerlink" title="预判核心内容"></a>预判核心内容</h2><p>一本书的主题、会议的议题往往是我们能够提前知道的。在读书或会议前，可以想一想，如果自己是作者/演讲人，如何讨论这个主题？</p><h2 id="记录讲解逻辑"><a href="#记录讲解逻辑" class="headerlink" title="记录讲解逻辑"></a>记录讲解逻辑</h2><p>逻辑推理比具体结论更重要。在做笔记的时候，不仅留意其说话的内容，还要尝试学习对方的讲解逻辑。</p><h2 id="疑问和启发"><a href="#疑问和启发" class="headerlink" title="疑问和启发"></a>疑问和启发</h2><p>我有什么疑问吗？他的想法有什么局限性吗？哪些观点给自己很大启发？</p><p>能否联想到其他案例？</p><h2 id="提炼思维模型"><a href="#提炼思维模型" class="headerlink" title="提炼思维模型"></a>提炼思维模型</h2><p>这个方法如何解决问题？策略为什么有效？策略的来源和依据是什么？</p><p>启发点和过去的学习联系起来，新原理解释旧道理。</p><h2 id="变成具体行动"><a href="#变成具体行动" class="headerlink" title="变成具体行动"></a>变成具体行动</h2><p>学到的知识，能否运用到自己的生活里？启发完全有机会变成日程表中的行动计划，改变生活。</p>]]></content>
      
      
      <categories>
          
          <category> Nonsense </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>backend</title>
      <link href="/2023/05/23/backend/"/>
      <url>/2023/05/23/backend/</url>
      
        <content type="html"><![CDATA[<h1 id="网络协议：TCP-IP"><a href="#网络协议：TCP-IP" class="headerlink" title="网络协议：TCP/IP"></a>网络协议：TCP/IP</h1><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>在一个前后端写作的实际项目中，前端程序员与后端程序员需要通过网络传递信息。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>curl命令常见用法</title>
      <link href="/2023/05/10/curl/"/>
      <url>/2023/05/10/curl/</url>
      
        <content type="html"><![CDATA[<h1 id="Curl什么用？"><a href="#Curl什么用？" class="headerlink" title="Curl什么用？"></a>Curl什么用？</h1><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>使用curl命令向本地主机发送带有请求主体（request body）的HTTP请求：<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-H</span> <span class="token string">"Content-Type: application/json"</span> <span class="token parameter variable">-d</span> <span class="token string">'&#123;"name": "John Doe", "age": 30&#125;'</span> http://localhost:8080/api/users<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>该命令会向 <code>http://localhost:8080/api/users</code> 发送一个POST请求，并且包含了一个JSON格式的请求主体。</p><ul><li><p><code>-X</code>: 用于指定请求方法</p></li><li><p><code>-H</code>：用于指定请求头，表明 <code>Content-Type</code> 为 <code>application/json</code></p></li><li><p><code>-d</code>：指定了请求主体的内容，后接JSON格式的request body</p></li></ul><h1 id="什么是请求头？"><a href="#什么是请求头？" class="headerlink" title="什么是请求头？"></a>什么是请求头？</h1><p>HTTP 请求头（Request Header）是指在客户端向服务器发送 HTTP 请求时，附加在请求中的一些额外信息。这些信息通常包括客户端和服务器之间需要协商的各种参数、相关身份验证信息和其他元数据。</p><p>请求头包含了请求的一些重要信息，用于控制请求的行为和内容，例如：</p><ul><li><p><code>User-Agent</code>：标识浏览器的类型和版本号</p></li><li><p><code>Accept</code>：指定客户端（一般是你的浏览器）可以接受的响应类型，如 HTML、JSON、XML 等<br>在 HTTP 请求中，Accept 头部字段指定了客户端（通常是你的浏览器）能够接受的响应内容类型。这个头部字段允许客户端对服务器发送的响应内容类型进行筛选和排序。</p></li></ul><p>Accept 字段通常采用 MIME 类型（Multipurpose Internet Mail Extensions）的格式，例如：</p><p>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,<em>/</em>;q=0.8<br>这个例子中，客户端声明它可以接受的最优先的内容类型是 “text/html”，然后是 XHTML 和 XML。”/“ 表示任何其它类型的内容都可以接受，但权重仅为 0.8，表示它们不如前面提到的三种类型更理想。</p><p>如果服务器无法提供客户端请求的任何一种类型，则应该返回一个 406 Not Acceptable 状态码。</p><p>使用 Accept 头部字段可以帮助服务器根据客户端的需求返回符合要求的响应内容，从而提高 Web 应用程序的灵活性和可扩展性。</p><ul><li><p><code>Authorization</code>：包含身份认证信息，用于对服务器进行访问授权</p></li><li><p><code>Content-Type</code>：<strong>请求主体</strong>的数据类型，如 <code>application/json</code>、<code>application/x-www-form-urlencoded</code> 等</p></li><li><p><code>Cookie</code>：包含客户端保存的会话信息，用于保持用户状态</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>报名工高这些天</title>
      <link href="/2023/04/25/acee/"/>
      <url>/2023/04/25/acee/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>刚刚结束了工高的专家面。报名工高的日子延续了一个多月，浑身轻松。</p><p>结果怎样我心里没底，不妨让子弹飞一会儿。很想在这样一个悬而未决的时间点上，趁着温热的回忆没有完全冷却，写一点报名过程的感受与心得。</p><h1 id="慕名而来"><a href="#慕名而来" class="headerlink" title="慕名而来"></a>慕名而来</h1><p>开放报名表前一周，我第一次听到“工高”这个名字。我中意那里丰富的资源、优秀的同学，同时还有那工高独有的凝聚感。</p><p>我怀念的那高中一起奋斗的纯粹时光，似乎能在工高重新找到。志同道合的人能够从天南海北相遇，说浪漫也不为过。</p><h1 id="个人面"><a href="#个人面" class="headerlink" title="个人面"></a>个人面</h1><ul><li><p>自始至终，我对自己的定位都是一个<strong>普通人</strong>。自己能比较高效地应付平时作业，但面对实践面的题目依然感到心有余而力不足。</p></li><li><p><strong>学习能力</strong>与<strong>毅力</strong>相比，后者更重要。</p></li></ul><p>一面的形式是：<strong>从4个选题中独立完成3个Project</strong>。题型从小作文、代码、建模到数学，每一个都需要花费一番心思。</p><p>不同的人对题目难度有不同理解。如果你也认为自己是个普通人（指没有太多竞赛经历，在计算机、数学方面没有脱离课堂的拓展），每一道题目看起来都会是不可逾越的，好像每一个词语都需要花费时间去理解。</p><p>很多人说一面考察短时间的学习能力。我认为一面更重要的作用是，从所有报名者中筛选出<strong>真正希望挑战自我的人</strong>。<strong>运气不管用了</strong>。</p><h2 id="下定决心"><a href="#下定决心" class="headerlink" title="下定决心"></a>下定决心</h2><p>做表之前，请好<strong>全力以赴</strong>的思想准备。我会想好：在这一周里，你会翘课，喝咖啡，端着电脑在教学楼坐一整个下午。你大概率有机会看到凌晨的紫金港。并且那时候灿若星辰灯不会为谁而亮。</p><p>然而做表的七天并没有那么难堪。也有好好吃饭好好睡觉，最后两天熬一熬。生活和报名表同样重要。</p><p>最有可能的顾虑是：“我一无所获怎么办”。我们为报名表投入时间与精力，事实上并不会带来什么物质上的收获。但请相信，你的收获是内化的。七天以后的所得不一定能用一个数字去衡量，但你一定能感受到那份成长的力量。</p><p>于我而言，想明白自己的追求，便是其中一个无价的收获。</p><h2 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h2><p>学习方法是一个十分个性化的过程。面对报名表中浩如烟海的难题，第一步不是埋头做题，而是想明白完成它需要用到哪些知识点。用尽可能精准的词语罗列出来，逐一攻破，最后去解题。就有豁然开朗的感觉。</p><h1 id="实践面"><a href="#实践面" class="headerlink" title="实践面"></a>实践面</h1><p>6人小组合作解题。难度有保障！</p><p>一个合理的分工不是让某位大佬包揽全局，而是让每一位成员都能感受到自己有所贡献。因此，开工前最重要的事情是<strong>让大家根据自己的能力选择主攻题目</strong>。</p><p>同时不必担心自己分到的题目太简单。难题一般会是无底深渊。</p>]]></content>
      
      
      <categories>
          
          <category> Nonsense </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Arduino入门</title>
      <link href="/2023/04/07/arduino/"/>
      <url>/2023/04/07/arduino/</url>
      
        <content type="html"><![CDATA[<h1 id="何为Arduino？"><a href="#何为Arduino？" class="headerlink" title="何为Arduino？"></a>何为Arduino？</h1><h2 id="Arduino-是一个开源嵌入式硬件平台，用来供使用者制作可交互式的嵌入式项目"><a href="#Arduino-是一个开源嵌入式硬件平台，用来供使用者制作可交互式的嵌入式项目" class="headerlink" title="Arduino 是一个开源嵌入式硬件平台，用来供使用者制作可交互式的嵌入式项目"></a>Arduino 是一个开源嵌入式硬件平台，用来供使用者制作可交互式的嵌入式项目</h2><p>使用的硬件：<code>Arduino UNO板</code></p><p>软件：<code>Arduino IDE 2.0.4</code></p><h2 id="Arduino-UNO"><a href="#Arduino-UNO" class="headerlink" title="Arduino UNO"></a>Arduino UNO</h2><p><img src="/2023/04/07/arduino/usage.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> Arduino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言格式化输出</title>
      <link href="/2023/04/05/c-yu-yan-ge-shi-hua-shu-chu/"/>
      <url>/2023/04/05/c-yu-yan-ge-shi-hua-shu-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h1><p>函数原型：<code>int printf( const char * format, ...);</code></p><p>其中<code>format</code>表示对数据的格式化方式，是一串字符串；<code>...</code>表示可以输入任意多个参数。</p><p>一般情况下format字符串应当按照以下格式书写：</p><blockquote><p><code>%[flags][width][.precision][length]specifier</code></p></blockquote><p>括号内可写可不写，最后一处说明符(specifier)不能少。</p><p>例如<code>%d  %.3lf  %s</code> 都是合法的，表达了不同的格式化方法，用于输出不同的字符。</p><h2 id="specifier"><a href="#specifier" class="headerlink" title="specifier"></a><code>specifier</code></h2><p><img src="/2023/04/05/c-yu-yan-ge-shi-hua-shu-chu/4-5C-printf\specifier.png" alt="Specifier 可选参数"></p><h2 id="width"><a href="#width" class="headerlink" title="[width]"></a><code>[width]</code></h2><p>用于指定输出数据占据的<strong>最小宽度</strong>。如果输出数据宽度比指定长度短，将会用空格填充到指定长度。数据超过指定宽度时<strong>不会</strong>被截断。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">12345</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1234567</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%6d %6d %6d"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>输出:  <code>#12345####123#1234567</code><br>为了方便辨认，<code>#</code>表示空格</p></blockquote><p>如果想用<code>0</code>填充空白处，可以写成<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%06d"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><blockquote><p>输出: <code>000123</code></p></blockquote><p>除了空格与0，似乎不能用其他字符填充。</p><h2 id="flags-可选参数"><a href="#flags-可选参数" class="headerlink" title="[flags]可选参数"></a><code>[flags]</code>可选参数</h2><ul><li><code>-</code> 输出数据往左对齐。<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">12345</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1234567</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-6d %-6d %-6d"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>输出:  <code>12345##123####1234567</code><br><code>#</code>表示空格</p></blockquote></li></ul><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>一旦输出成功，<code>printf</code>函数会返回输出的字符总数。</p><p>输出出现了错误，会返回一个负数值。<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">12345</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1234567</span><span class="token punctuation">;</span><span class="token keyword">int</span> num_ch<span class="token punctuation">;</span>num_ch <span class="token operator">=</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%06d %06d %06d"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n%d"</span><span class="token punctuation">,</span> num_ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><blockquote><p>输出：<br><code>012345 000123 1234567</code><br><code>21</code></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++ 头文件&lt;stdarg.h&gt;</title>
      <link href="/2023/03/29/c-c-tou-wen-jian-stdarg-h/"/>
      <url>/2023/03/29/c-c-tou-wen-jian-stdarg-h/</url>
      
        <content type="html"><![CDATA[<p>我们用scanf函数可以读入任意多个数据</p><p>如果我们用过C++ 的输入、输出流（cin、cout）会发现它也能输入任意多个数字。</p><p>如何自己写一个函数，实现能够传递任意参数的功能呢？</p><p><code>stdarg.h</code> 头文件提供了方法。</p><p><code>stdarg</code> 提供了一个数据类型和四种函数。分别是：</p><ul><li><p><code>va_list</code>: 数据类型，可以看做一个链表，用于存放传入函数的多个参数。</p></li><li><p><code>va_start()</code>: 初始化一个 va_list 类型的链表。函数原型：</p></li></ul><p><code>void va_start (va_list ap, paramN);</code></p><p>ap是自己定义的一个<code>va_list</code>类型变量。<code>paramN</code> 是数据个数。</p><p>执行之后，ap就携带了传入数据的所有信息。</p><ul><li><code>va_arg()</code>： 得到链表中下一个数据。函数原型：</li></ul><p><code>type va_arg (va_list ap, type);</code></p><p>type 表示数据类型</p><p>此函数用来得到每一个传入函数的参数。</p><ul><li><code>va_end()</code> 将一个<code>va_list</code> 链表弃用。原型：</li></ul><p><code>void va_end (va_list ap);</code></p><p>得到所有数据之后，将这个链表ap回收。</p><p>例：实现一个函数，可以输入任意多个链表<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>PtrToNode<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> Data<span class="token punctuation">;</span>    PtrToNode Next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> PtrToNode List<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">ReadList</span><span class="token punctuation">(</span><span class="token keyword">int</span> num_args<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    va_list BufferList<span class="token punctuation">;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    List L<span class="token punctuation">;</span>    <span class="token function">va_start</span><span class="token punctuation">(</span>BufferList<span class="token punctuation">,</span> num_args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化BufferList</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num_args<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        L <span class="token operator">=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>BufferList<span class="token punctuation">,</span> List<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里L是一个新的链表头。</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>val <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 输出 -1 表示链表结束</span>        <span class="token punctuation">&#123;</span>            <span class="token function">append</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 添加val，具体实现不表。</span>            L <span class="token operator">=</span> L<span class="token operator">-></span>Next<span class="token punctuation">;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">va_end</span><span class="token punctuation">(</span>BufferList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//销毁 BufferList</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C_Debug</title>
      <link href="/2023/03/28/c-debug/"/>
      <url>/2023/03/28/c-debug/</url>
      
        <content type="html"><![CDATA[<h1 id="这篇博客记录我为-C-C-写过的bug"><a href="#这篇博客记录我为-C-C-写过的bug" class="headerlink" title="这篇博客记录我为 C/C++ 写过的bug"></a>这篇博客记录我为 C/C++ 写过的bug</h1><ul><li>源代码：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span>List L1<span class="token punctuation">,</span> List L2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret<span class="token operator">=</span><span class="token function">check</span><span class="token punctuation">(</span>L1<span class="token punctuation">,</span>L2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>报错：</p><blockquote><p><code>expression must be a modifiable lvalue</code></p></blockquote><ul><li>分析： </li></ul><p>这里<code>lvalue</code> 应该是 <code>left value</code>的意思。编译器说您表达式的左值必须是可变的。</p><p>发现问题是 == 写成了 =。左边因为存在括号，会先计算出括号内的值。也就是说，<br><code>(ret = check(L1,L2))</code> 将会被替换为<code>check(L1,L2)</code>的结果，在此处是一个指针类型的变量。一个普通变量的值不能被更改。（就像我不能写<code>1 = 2;</code>这样的语句。）</p><ul><li>修改方法:<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ret<span class="token operator">=</span><span class="token function">check</span><span class="token punctuation">(</span>L1<span class="token punctuation">,</span>L2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><hr><ul><li>源代码<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>编译器Warning：<blockquote><p><code>ISO C++ forbids converting a string constant to &#39;char*&#39; [-Wwrite-strings]</code></p></blockquote></li></ul><p><code>char *str[10];</code>定义的是指针数组。因此类似的，<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>p <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>会报出同样的错误。</p><ul><li>分析：</li></ul><p><code>&quot;Hello&quot;</code>在C语言中是字符串常量，在c++中叫做<code>string literal</code>，类型是<code>const char *</code>其实际是一个指向首字母<code>&#39;H&#39;</code>地址的指针。</p><p>此处是将一个<code>Const char *</code>类型强制转换为 <code>char *</code>类型，有改动常量的可能性。</p><p>编译运行的结果会因编译器和操作系统共同决定，有的编译器会通过，有的会抛异常，就算过了也可能因为操作系统的敏感性而被杀掉。</p><ul><li>修改方法<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>或者<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><hr><ul><li>问题</li></ul><blockquote><p>向一个字符指针读入字符串时出现<code>segment fault</code>。 例如： <code>scanf(&quot;%s&quot;,p);</code></p></blockquote><p>更隐蔽的情况是，我定义了一个字符指针数组。<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> <span class="token operator">*</span> str<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><ul><li>原因</li></ul><p>在str数组中的每一个指针都是悬垂指针，没有指向一个已经分配的地址。</p><p>就像是我定义一个 <code>char * p;</code> 此时<code>p</code>指向的是<code>NULL</code>或者一个随机地址。</p><p>此时<code>scanf(&quot;%s&quot;,p);</code> 是会出问题的。</p><ul><li>修改方法<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>MAX_LEN <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><blockquote><p>C语言： <code>variably modified &#39;xxx&#39; at file scope</code></p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> MAXLEN <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span>MAXLEN<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>gcc编译报错。</p><ul><li>原因</li></ul><p>C语言中的const并不是<strong>常量</strong>的意思。它的本意是<strong>只读 read only</strong>  </p><blockquote><p>The const qualifier really means <strong>read-only</strong>; an object so qualified is a run-time object which <strong>cannot (normally) be assigned to</strong>. The value of a const-qualified object is therefore not a constant expression in the full sense of the term, and <strong>cannot be used for array dimensions, case labels, and the like.</strong> (C is unlike C++ in this regard.) When you need a true compile-time constant, use a preprocessor #define (or perhaps an enum)</p></blockquote><ul><li>解决方法：使用<code>define</code></li></ul><blockquote><p><code>int a[3][4], (*num)[4];  num[0]=&amp;a[1][3];</code><br>编译器报错： <code>expression must be a modifiable Ivalue</code></p></blockquote><ul><li>原因</li></ul><p><code>int (*p)[4];</code> 指的是一个指针， 指向4个<code>int</code>类型数据</p><p>所以<code>p = &amp;a[0]</code> 就是正确的。</p><blockquote><p>(TYPE) malloc(SIZE);</p></blockquote><ul><li><p>用法： 在动态内存（堆）中开辟 SIZE 字节的空间，返回首地址</p></li><li><p>注意： TYPE 一般是一个指针，指针变量存储一个8字节整数。<br>SIZE我们一般使用N*sizeof(TYPE)，注意这里TYPE一不用指针，而是本体代表的数据类型。</p></li></ul><h2 id="非静态成员引用必须与特定对象相对"><a href="#非静态成员引用必须与特定对象相对" class="headerlink" title="非静态成员引用必须与特定对象相对"></a>非静态成员引用必须与特定对象相对</h2><p><a href="https://blog.csdn.net/m0_46376834/article/details/132546940">非静态成员引用必须与特定对象相对-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> Nonsense </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Task_B</title>
      <link href="/2023/03/17/gong-ju-li-xing/"/>
      <url>/2023/03/17/gong-ju-li-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="秩序，工具与理性"><a href="#秩序，工具与理性" class="headerlink" title="秩序，工具与理性"></a>秩序，工具与理性</h1><blockquote><p>献给自己</p></blockquote><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>你相信世界的是秩序构成的吗？</p><p>是的，这个世界需要秩序。苹果落地是牛顿定律在作用；红灯停绿灯行，是交通法律的效力。</p><p><strong>然而，世界的本源只有秩序吗？</strong></p><p>假如一切事物——人，物，宇宙——都已经被固定的规律预设，是不是我们未来的一举一动都成了一种可知的必然？</p><p>听起来很荒谬。</p><p>就像《三体》中的火鸡科学家。活在人类框定的农场里，他们的至上真理不过是每天中午会定时开饭。这样的火鸡们会不可避免地走向虚无。或者在虚无到来之前，感恩节降临了。</p><p><strong>仅有秩序存在的体系是不会有灵性的。</strong> 因为秩序是不变，是僵死。它环环相扣，逻辑严密地证明自己，企图解释整个世界。但它唯独看不到自身之外的事物。</p><p>如果硬要给这个“秩序之外的事物”一个通俗的名称，我们可以叫他 “ <em>思维</em> ”。</p><p>Chat-GPT是火鸡。纵使它上晓天文下知地理，它依然不能摆脱代码的束缚。它的智慧不过是人类想象力的沧海一粟——因为所有的训练资料都源于人类自身的创造。</p><p><strong>一个秩序仅存的体系，可以有百兽、花鸟、日月星辰，唯独不能产生人类。秩序不能产生智慧。</strong></p><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>足球场上的VAR技术越来越成熟了。</p><p>球迷们用“体毛犯规”来嘲讽现在超级严格的判罚制度。有人认为频繁的VAR判决破坏了足球的流畅性，也有人说这是追求公平必要的牺牲。</p><p>他们说的都有道理。这件事情本身是公平和效率的一个 trade-off：VAR能带来极致的公平，但同时也影响了一些观感，带来不必要的判罚。</p><p>这让我不禁联想到<strong>工具理性</strong>这个词语。跟据马克斯.韦伯的定义， 工具理性是：“ 通过精确计算功利的方法最有效的达到目的的理性”。 相反的，<strong>价值理性</strong>注重人的情感体验，它难以运用数理方法计算出一个最优解。</p><p>两种工具谈不上孰优孰劣。我们都认可钱很重要，毕竟“有钱能使鬼推磨”，但这不意味着我们是拜金主义者：感情、艺术、书籍同样举足轻重。</p><p>工业革命、信息革命使人类的发展走向快车道。生活在黑白灰三色调的大城市中的人们，是否正在被科技异化为一个冰冷的齿轮？我们看到在现代社会的话语体系里，工具理性总是被抬到前所未有的高度。提高高考成绩的方法是多刷题，想拿高绩点就选水课，来钱最快的专业是CS。</p><h3 id="现实是，有些人对高中刷题感到反感，却没有发觉卷绩点的荒谬；有些人过分执着于物质，却忽视了精神给养。"><a href="#现实是，有些人对高中刷题感到反感，却没有发觉卷绩点的荒谬；有些人过分执着于物质，却忽视了精神给养。" class="headerlink" title="现实是，有些人对高中刷题感到反感，却没有发觉卷绩点的荒谬；有些人过分执着于物质，却忽视了精神给养。"></a>现实是，有些人对高中刷题感到反感，却没有发觉卷绩点的荒谬；有些人过分执着于物质，却忽视了精神给养。</h3><p>在球场上，足球规则和VAR是实现公平的工具，观众的价值体验在于看到更加精彩的比赛。不可否认，公平是比赛精彩的前提；但我们是否需要极致的规则来实现公平呢？</p><blockquote><p> VAR(Video Assistant Referee，视频助理裁判) 毁了足球，犹如特效毁了电影   ————黄健翔</p></blockquote><hr><h3 id="工具仅仅是手段，不是目的"><a href="#工具仅仅是手段，不是目的" class="headerlink" title="工具仅仅是手段，不是目的"></a>工具仅仅是手段，不是目的</h3><p>举一个十分浅薄的例子：我们学python不只是为了搞懂语法，而是为了利用它丰富的模块完成具体的工作；学习英语不只是为了四六级分数，而是用它来理解另一个语言的丰富内涵。</p><p>当手段异化为目的，就像是上枯燥的语法课，无尽地刷试卷。<strong>广阔的视野，是书卷上学不到的。</strong></p><h3 id="不做井底之蛙，常怀凌云之志"><a href="#不做井底之蛙，常怀凌云之志" class="headerlink" title="不做井底之蛙，常怀凌云之志"></a>不做井底之蛙，常怀凌云之志</h3><p>在自我革新的路上，有痛苦难言的内耗，深剖内心的反思，有尖锐的思考，决绝的行动。人类独有的主观能动性赋予了我们能够痛苦并保持清醒的特权，赋予了我们勇攀高峰的勇气。</p><p>而跳脱出一个给定的体系框架，往往是所有思考中最难最痛苦的过程。像是需要接触一门完全不熟悉的学科，我们一定会有不少排斥。</p><p>我不能狂言：“勇敢去做吧！”</p><p>我只会在冷静浑全的思考之后，坚定果决地踏上一条新的征程。</p><p><strong>所以，才会写下以上这些文字。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bash入门</title>
      <link href="/2023/03/13/bash/"/>
      <url>/2023/03/13/bash/</url>
      
        <content type="html"><![CDATA[<h1 id="变量替换"><a href="#变量替换" class="headerlink" title="变量替换"></a>变量替换</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token assign-left variable">foo</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>定义了一个foo变量。</p><p>可以使用<code>$foo</code>来使用它。bash会将整个字符串替换为1。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token variable">$foo</span>bash: <span class="token number">1</span>: <span class="token builtin class-name">command</span> not found$ <span class="token builtin class-name">echo</span> <span class="token variable">$foo</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这里$foo 与C语言中的宏定义很像。bash将 <code>$foo</code> 替换为<code>1</code>以后，将它当成一个指令了。</p><p>所以上面的代码相当于：<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token number">1</span>bash: <span class="token number">1</span>: <span class="token builtin class-name">command</span> not found$ <span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><ul><li>注意定义变量时中间不能有空格，否则bash会把变量名当做一个命令。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">date</span>Mon Mar <span class="token number">13</span> <span class="token number">15</span>:31:18     <span class="token number">2023</span>$ <span class="token assign-left variable">bar</span><span class="token operator">=</span>date$ <span class="token variable">$bar</span>Mon Mar <span class="token number">13</span> <span class="token number">15</span>:31:48     <span class="token number">2023</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><code>$bar</code> 被替换为 <code>date</code>， bash把他当做一个命令，返回当前时间。</li></ul><h1 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h1><p>当您通过 <code>$( CMD )</code>这样的方式来执行<code>CMD</code>这个命令时，它的输出结果会替换掉 <code>$( CMD )</code> 。例如，如果执行 <code>for file in $(ls)</code> ，shell首先将调用<code>ls</code> ，然后遍历得到的这些返回值。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span>$bar<span class="token variable">)</span></span>Mon Mar <span class="token number">13</span> <span class="token number">15</span>:35:55 <span class="token number">2023</span>$ <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span><span class="token variable">)</span></span>Mon Mar <span class="token number">13</span> <span class="token number">15</span>:40:31 <span class="token number">2023</span>$ <span class="token builtin class-name">echo</span> <span class="token function">date</span><span class="token function">date</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"date"</span>     <span class="token comment">#没有进行任何替换</span><span class="token function">date</span>$ <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span><span class="token variable">)</span></span>"</span>   <span class="token comment"># 先执行 date命令，用返回值替换掉  $(date)</span>Mon Mar <span class="token number">13</span> <span class="token number">15</span>:41:53     <span class="token number">2023</span>$ <span class="token builtin class-name">echo</span> <span class="token string">'$(date)'</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还有一个冷门的类似特性是 进程替换（process substitution）， <code>&lt;( CMD )</code> 会执行 <code>CMD</code> 并将结果输出到一个临时文件中，并将 <code>&lt;( CMD )</code> 替换成临时文件名。这在我们希望返回值通过文件而不是STDIN传递时很有用。例如， <code>diff &lt;(ls foo) &lt;(ls bar)</code> 会显示文件夹 <code>foo</code> 和 <code>bar</code> 中文件的区别。<br>这一点特性可以与python中的匿名函数<code>lambda</code>互相照应。</p><h1 id="字符替换"><a href="#字符替换" class="headerlink" title="字符替换"></a>字符替换</h1><p><strong>在bash中，”   “双引号 与 ‘   ‘单引号 含义是不同的</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token string">"Hi <span class="token variable">$foo</span>"</span>Hi <span class="token number">1</span>$ <span class="token builtin class-name">echo</span> <span class="token string">'Hi $foo'</span>Hi <span class="token variable">$foo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于单引号，bash不会解析内容的含义，即不会进行类似宏定义的替换。 双引号则相反。</p>]]></content>
      
      
      
        <tags>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl 使用事故合集</title>
      <link href="/2023/01/13/wsl/"/>
      <url>/2023/01/13/wsl/</url>
      
        <content type="html"><![CDATA[<h1 id="安装wsl"><a href="#安装wsl" class="headerlink" title="安装wsl"></a>安装wsl</h1><p>以管理员身份打开Windows Powershell （按Win + x键，选择Windows终端（管理员）） </p><p>在命令行中运行：<br><pre class="line-numbers language-none"><code class="language-none">wsl --install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>即可自动安装wsl内核以及默认的ubuntu系统。</p><p>当然，也可以在Microsoft Store 里面搜索wsl直接安装。（不用翻墙）</p><p>如果你的wsl被玩崩了，在<strong>此电脑 —&gt; 属性 —&gt; 应用 —&gt; 应用和功能 —&gt; 找到Ubuntu —&gt; 高级选项 —&gt; 重置</strong>重头再来。</p><p>注意输入密码的时候，密码不会显示在屏幕上。所以一定要记住自己输入了什么。</p><p>可以参考<a href="https://learn.microsoft.com/zh-cn/windows/wsl/install">Microsoft官方文档</a></p><h1 id="在wsl上使用python"><a href="#在wsl上使用python" class="headerlink" title="在wsl上使用python"></a>在wsl上使用python</h1><p>WSL2默认安装了python3.8。在命令行中输入<br><pre class="line-numbers language-none"><code class="language-none">python3 --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>会显示 <code>python 3.8.10</code></p><p>输入<br><pre class="line-numbers language-none"><code class="language-none">python3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>就可以直接在命令行中使用python解释器。输入<br><pre class="line-numbers language-none"><code class="language-none">exit()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>退出，回到shell。</p><h3 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h3><blockquote><p><a href="https://blog.csdn.net/qq_41767116/article/details/122787794">什么是pip？</a></p><p><a href="https://www.toutiao.com/article/6860812082552504840/?group_id=6860812082552504840&amp;wid=1673600882006">pip用法</a></p></blockquote><p>输入以下命令来安装。</p><pre class="line-numbers language-none"><code class="language-none">sudo apt install python3-pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时可能会报错：<code>E: Package &#39;python3-pip&#39; has no installation candidate</code></p><p>解决方法：更新资源库 source list<br><pre class="line-numbers language-none"><code class="language-none">sudo apt-get updatesudo apt-get upgrade  #可选sudo apt install python3-pip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>整个过程比较慢。</p><p>输入<br><pre class="line-numbers language-none"><code class="language-none">pip --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>检验是否安装成功。</p><p>输入<br><pre class="line-numbers language-none"><code class="language-none">pip install -U pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>来更新pip。</p><h3 id="安装venv"><a href="#安装venv" class="headerlink" title="安装venv"></a>安装venv</h3><p>执行命令<br><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install python3-venv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>安装好，使用<br><pre class="line-numbers language-none"><code class="language-none">python3 -m venv 环境名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>在当前目录下创建python环境。然后执行命令<br><pre class="line-numbers language-none"><code class="language-none">source 环境名&#x2F;bin&#x2F;activate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>来激活对应环境。</p><p>如要退出当前环境，执行<br><pre class="line-numbers language-none"><code class="language-none">deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>至此，就可以在WSL上使用python了！</p><h3 id="安装numpy到此环境"><a href="#安装numpy到此环境" class="headerlink" title="安装numpy到此环境"></a>安装numpy到此环境</h3><pre class="line-numbers language-none"><code class="language-none">pip install 包名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>来下载制定的包。</p><p>可以使用清华镜像资源加速下载<br>在<code>$HOME</code>下创建一个<code>.pip</code> 的文件夹，新建<code>pip.conf</code>文件，在其中保存以下内容<br><pre class="line-numbers language-none"><code class="language-none">[global]index-url &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple[install]trusted-host&#x3D;mirrors.aliyun.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
      
      
      <categories>
          
          <category> Nonsense </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vim And vim plugins</title>
      <link href="/2023/01/11/vim/"/>
      <url>/2023/01/11/vim/</url>
      
        <content type="html"><![CDATA[<h1 id="vim基础"><a href="#vim基础" class="headerlink" title="vim基础"></a>vim基础</h1><h2 id="普通模式"><a href="#普通模式" class="headerlink" title="普通模式"></a>普通模式</h2><h3 id="在vim中，操作-操作符-动作-。每个操作之前可以加上数字n，实现重复n次的作用。"><a href="#在vim中，操作-操作符-动作-。每个操作之前可以加上数字n，实现重复n次的作用。" class="headerlink" title="在vim中，操作 = 操作符 + 动作 。每个操作之前可以加上数字n，实现重复n次的作用。"></a>在vim中，<code>操作 = 操作符 + 动作</code> 。每个操作之前可以加上数字n，实现重复n次的作用。</h3><ol><li>操作符：</li></ol><p><code>c ：删除并进入插入模式。 对应change</code></p><p><code>cc : 删除整行并进入insert模式</code></p><p><code>d : 删除。对应delete</code></p><p><code>dd : 删除整行。</code></p><p><code>x : 删除。</code></p><p><code>i : 进入插入模式，在光标所在字符前插入。 对应insert</code></p><p><code>a : 进入插入模式，在光标所在字符后插入。 对应append</code></p><p><code>v, V, &lt;C-v&gt; ：进入visual模式；visual-line 模式；visual-block 模式。</code></p><p><code>. : 重复上次的操作。</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用最少的按键修改，使输出的内容之间用空格分隔开。</span>a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">1</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>动作：</li></ol><p><code>h j k l : 分别对应 ←  ↓  ↑  →</code></p><p><code>w e b : 分别对应 光标移动到下一个单词的开头； 到下一个单词的结尾；到上一个单词的开头。</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">word1  word2  word  <span class="token number">3</span> word4<span class="token comment">// 尝试使用 2w, 3e, 4b, dw, cw</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>$ 0 : 分别对应 光标所在行的最后一列、 第一列</code> </p><pre class="line-numbers language-none"><code class="language-none">尝试使用 d$, c$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>&lt;C-a&gt;  (Ctrl + a) : 实现数字的增加</code><br><pre class="line-numbers language-none"><code class="language-none">Normal 模式下, 光标停在数字 42 上，键入 4&lt;C-a&gt; 命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><code>&lt;C-x&gt; : 实现数字的减少</code></p><pre class="line-numbers language-none"><code class="language-none">Normal 模式下, 光标停在数字 42 上，键入 2&lt;C-x&gt; 命令<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="a-around-，i-inside-操作文本对象"><a href="#a-around-，i-inside-操作文本对象" class="headerlink" title="a(around)，i(inside) 操作文本对象"></a>a(around)，i(inside) 操作文本对象</h3><p>这种用法通常使用在修改括号中的内容。</p><p>他们两个的区别是</p><p><code>a（around） 操作范围包括边界</code></p><p><code>i（inside） 操作范围不包括边界</code><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">aaa bbb cccaaa bbb<span class="token comment">//将光标处在第二个b上, 执行 viw，你会发现bbb 高亮。如果你执行vaw</span>你会发现bbb后面的空格也会高亮<span class="token punctuation">,</span>如果后面没有ccc，前面的空格会高亮对于字符串 <span class="token punctuation">&#123;</span>aaa<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>如果你执行va<span class="token punctuation">&#123;</span><span class="token punctuation">,</span>那么<span class="token punctuation">&#123;</span>aaa<span class="token punctuation">&#125;</span>整个都会高亮；如果你执行vi<span class="token punctuation">&#123;</span><span class="token punctuation">,</span>那么只有aaa会高亮<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h2><h2 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h2><h1 id="Vim-Plugins"><a href="#Vim-Plugins" class="headerlink" title="Vim Plugins"></a>Vim Plugins</h1><h2 id="vim-surround"><a href="#vim-surround" class="headerlink" title="vim-surround"></a>vim-surround</h2><p>Delete surroundings is <strong>ds</strong> .  The next character given determines the target to delete.  The exact nature of the target is explained in |surround-targets|  but essentially it is the last character of a |text-object|.  This mapping deletes the difference between the “i”nner object and “a”n object.  This is easiest to understand with some examples:</p><p>其中，<strong>*</strong>代表光标位置</p><div class="table-container"><table><thead><tr><th>Old text</th><th>Command</th><th>New text</th></tr></thead><tbody><tr><td>“Hello *world!”</td><td>ds”</td><td>Hello world!</td></tr><tr><td>(123+4*56)/2</td><td>ds)</td><td>123+456/2</td></tr><tr><td><div>Yo!*</div></td><td>dst</td><td>Yo!</td></tr></tbody></table></div><p>Change surroundings is <strong>cs</strong> .  It takes <strong>two arguments</strong>, a target like with |ds|, and a replacement.  <strong>cS</strong> changes surroundings, placing the surrounded text on its own line(s) like |yS|.  Details about the second argument can be found below in |surround-replacements|.  Once again, examples are in order.</p><div class="table-container"><table><thead><tr><th style="text-align:center">Old text</th><th style="text-align:center">Command</th><th style="text-align:center">New text ~</th></tr></thead><tbody><tr><td style="text-align:center">“Hello *world!”</td><td style="text-align:center">cs”‘</td><td style="text-align:center">‘Hello world!’</td></tr><tr><td style="text-align:center">“Hello *world!”</td><td style="text-align:center">cs”\<q\></q\></td><td style="text-align:center">\<q\>Hello world!\&lt;/q></q\></td></tr><tr><td style="text-align:center">(123+4*56)/2</td><td style="text-align:center">cs)]</td><td style="text-align:center">[123+456]/2</td></tr><tr><td style="text-align:center">(123+4*56)/2</td><td style="text-align:center">cs)[</td><td style="text-align:center">[ 123+456 ]/2    多了一个空格</td></tr><tr><td style="text-align:center">\<div\>Yo!*\&lt;/div></div\></td><td style="text-align:center">cst\<p\></p\></td><td style="text-align:center">\<p\>Yo!\&lt;/p></p\></td></tr></tbody></table></div><p>cst中的t可以理解为tag。删除环绕的tag，然后用\<p\>环绕。</p\></p><p>As a special case, <strong>yss</strong> operates on the current line, ignoring leading whitespace.</p><p><code>yss</code> 命令能够自动忽略行首的缩进，并将整行加上括号。类比<code>yy</code>可以复制整行代码。</p><p>  Old text                  Command     New text ~<br>      Hello w*orld!         yssB            {Hello world!}</p>]]></content>
      
      
      <categories>
          
          <category> Blogs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Clash 错误排查</title>
      <link href="/2023/01/11/vpn/"/>
      <url>/2023/01/11/vpn/</url>
      
        <content type="html"><![CDATA[<h1 id="Clash-错误排查"><a href="#Clash-错误排查" class="headerlink" title="Clash 错误排查"></a>Clash 错误排查</h1><ul><li><p>校准系统时间</p><p>需要确认系统时间与世界时间误差不超过5s</p><ul><li><a href="https://jingyan.baidu.com/article/7f766daf6017a60001e1d0df.html">win10如何校准系统时间-百度经验 (baidu.com)</a></li></ul></li><li><p>注意可疑浏览器插件</p><p>若使用无痕模式能够访问google.com，大概率是某些插件的原因</p><ul><li>有些代理插件在不付费前无法使用代理，但又接管了浏览器的链接。因此导致第三方代理失效。</li></ul></li></ul><hr><p>配置详解：<a href="https://doc.miyun.app/app/clash-win-detail/">Clash for Windows 使用教程（详解，全流程） ⭐ 觅云🔥 (miyun.app)</a></p><p>一些错误排查：<a href="https://ikuuu.me/user/tutorial?os=windows&amp;client=cfw">Windows 使用教程 — iKuuu VPN</a></p>]]></content>
      
      
      <categories>
          
          <category> Bugs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1764</title>
      <link href="/2022/10/28/lgp1764/"/>
      <url>/2022/10/28/lgp1764/</url>
      
        <content type="html"><![CDATA[<h2 id="翻转游戏-加强版"><a href="#翻转游戏-加强版" class="headerlink" title="翻转游戏 (加强版)"></a><a href="https://www.luogu.com.cn/problem/P1764">翻转游戏 (加强版)</a></h2><p>拿到题目没有思路，首先手玩一下。但似乎找不到一种合适的决策方案。</p><p>可以想到的是：</p><ol><li>棋盘上每个位置只有两种状态，每个位置只能有两种操作（翻转/不翻转） </li><li>操作的顺序不改变结果 </li></ol><p>那么最直接的思路就是爆搜了。</p><p>具体思路：搜索两遍，一遍从0翻转到1，一遍从1翻转到0。<br>对于每个位置，直接决策需不需要翻转。</p><p>时间复杂度 <script type="math/tex">O(2^{n \times n})</script>  得分 30pts</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stk<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">300</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span>cnt<span class="token punctuation">,</span>top<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">upd</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nx<span class="token operator">=</span>x<span class="token operator">+</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ny<span class="token operator">=</span>y<span class="token operator">+</span>dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nx<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>nx<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>ny<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>ny<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span>            a<span class="token punctuation">[</span>nx<span class="token punctuation">]</span><span class="token punctuation">[</span>ny<span class="token punctuation">]</span><span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> res<span class="token punctuation">,</span><span class="token keyword">int</span> T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">bool</span> flg<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> flg<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> flg<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token operator">+</span>res<span class="token operator">-</span><span class="token number">1</span><span class="token operator">></span>n<span class="token operator">*</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Dfs</span><span class="token punctuation">(</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token punctuation">(</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">=</span>pos<span class="token operator">-</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">upd</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>T<span class="token punctuation">)</span><span class="token punctuation">,</span> stk<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>pos<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Dfs</span><span class="token punctuation">(</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> res<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token function">upd</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>T<span class="token punctuation">)</span><span class="token punctuation">,</span> top<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>top<span class="token punctuation">[</span>T<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// for (int i=1;i&lt;=top[T];i++) &#123;</span>    <span class="token comment">//     int x=(stk[T][i]-1)/n+1, y=stk[T][i]- (x-1)*n;</span>    <span class="token comment">//     printf("(%d,%d)\n",x,y);</span>    <span class="token comment">// &#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'b'</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">else</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">*</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span>cnt<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    cnt<span class="token operator">=</span>n<span class="token operator">*</span>n<span class="token operator">-</span>cnt<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">*</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span>cnt<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token comment">//printf("%d %d\n",top[0],top[1]);</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>top<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Impossible!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">></span>top<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然还有更优秀的算法。</p><p>我们发现，在第一行的操作方式确定以后，为了保证第一行全为0（全为1），下一行的操作方式是已经确定的。</p><p>因此只需要枚举第一行的操作，$2^{16}$种，然后对于每一行依次确定操作方式，根据最后一行是否满足条件来判断方案可行与否。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">min</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> dy<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> tmp<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>y<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">change</span><span class="token punctuation">(</span>x<span class="token operator">+</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>y<span class="token operator">+</span>dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> S<span class="token punctuation">,</span><span class="token keyword">int</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">memcpy</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span>a<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// n*n*4</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>obj<span class="token punctuation">)</span> <span class="token function">modify</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>obj<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1e9</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>             a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'b'</span> <span class="token operator">?</span> <span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ans<span class="token operator">=</span><span class="token number">1e9</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> S<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>S<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>S<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token function">check</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span><span class="token function">check</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token operator">==</span><span class="token number">1e9</span><span class="token punctuation">)</span> <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Impossible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">else</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1966</title>
      <link href="/2022/10/23/lgp1966/"/>
      <url>/2022/10/23/lgp1966/</url>
      
        <content type="html"><![CDATA[<h2 id="NOIP2013-提高组-火柴排队"><a href="#NOIP2013-提高组-火柴排队" class="headerlink" title="NOIP2013 提高组 火柴排队"></a><a href="https://www.luogu.com.cn/problem/P1966">NOIP2013 提高组 火柴排队</a></h2><p>尝试CCF老题。果然我已经老了，快排调试半小时。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> Mod<span class="token operator">=</span><span class="token number">1e8</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Num</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num<span class="token punctuation">,</span>id<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Num A<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token generic-function"><span class="token function">num</span> <span class="token generic class-name"><span class="token operator">&lt;</span> A<span class="token punctuation">.</span>num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">></span></span></span> <span class="token punctuation">(</span><span class="token keyword">const</span> Num A<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>num <span class="token operator">></span> A<span class="token punctuation">.</span>num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> a<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span>Num <span class="token operator">*</span>L<span class="token punctuation">,</span>Num <span class="token operator">*</span>R<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">+</span><span class="token number">1</span><span class="token operator">>=</span>R<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    Num <span class="token operator">*</span>ptl<span class="token operator">=</span>L<span class="token punctuation">,</span> <span class="token operator">*</span>ptr<span class="token operator">=</span>R<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token operator">*</span>L<span class="token punctuation">;</span> <span class="token comment">///我靠  这里key指针指向地址，所以当ptl被改变的时候，key也变了。</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ptl<span class="token operator">&lt;</span>ptr<span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>ptl<span class="token operator">&lt;</span>ptr <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>ptr<span class="token operator">></span>key<span class="token punctuation">)</span> ptr<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptl<span class="token operator">&lt;</span>ptr<span class="token punctuation">)</span> <span class="token operator">*</span>ptl<span class="token operator">=</span><span class="token operator">*</span>ptr<span class="token punctuation">,</span> ptl<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>ptl<span class="token operator">&lt;</span>ptr <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>ptl<span class="token operator">&lt;</span>key<span class="token punctuation">)</span> ptl<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptl<span class="token operator">&lt;</span>ptr<span class="token punctuation">)</span> <span class="token operator">*</span>ptr<span class="token operator">=</span><span class="token operator">*</span>ptl<span class="token punctuation">,</span> ptr<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token comment">//这里一定要加if 不然会出现左右交叉的情况</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">*</span>ptr<span class="token operator">=</span>key<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>ptr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sort</span><span class="token punctuation">(</span>ptr<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BIT</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span><span class="token operator">:</span>        <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span>x<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>x<span class="token operator">+=</span>x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>value<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">ask</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> ret<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span>x<span class="token punctuation">;</span>x<span class="token operator">-=</span>x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> ret<span class="token operator">+=</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>T<span class="token punctuation">;</span><span class="token keyword">int</span> pos<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">[</span><span class="token number">100004</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span><span class="token number">100005</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>  <span class="token comment">//b[a[i].id]=i; // Map</span>    <span class="token comment">// 第i大的数应该在第id个位置</span>    <span class="token comment">// for (int i=1;i&lt;=n;i++) pos[b[i]] = i;</span>    <span class="token comment">// for (int i=1;i&lt;=n;i++) printf("%d ",a[i].num); puts("");</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> c<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span> <span class="token comment">//id号位的映射为第i大</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>pos<span class="token punctuation">[</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// for(int i=1;i&lt;=n;i++) printf("%d ",d[i]); puts("");</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span>ans<span class="token operator">+=</span>T<span class="token punctuation">.</span><span class="token function">ask</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%=</span>Mod<span class="token punctuation">;</span>        T<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机体系，二进制及其使用</title>
      <link href="/2022/10/22/ji-suan-ji-xi-tong-gai-lun-xue-xi-bi-ji/"/>
      <url>/2022/10/22/ji-suan-ji-xi-tong-gai-lun-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>看了前言，发现这本书讲的内容和《程序是怎样跑起来的》有很大的重合，区别在于：后者注重“普及知识”，前者则强调体系而专业的学习。</p><h2 id="第一章：欢迎阅读本书"><a href="#第一章：欢迎阅读本书" class="headerlink" title="第一章：欢迎阅读本书"></a>第一章：欢迎阅读本书</h2><blockquote><p>计算机是一个包含了多层转换的系统。一个由自然语言（如英语）描述的问题，最终必须转化为计算机内部的电路工作（更具体地说是电子运动），才能得以解决。</p></blockquote><h3 id="计算机处理问题的7个层级："><a href="#计算机处理问题的7个层级：" class="headerlink" title="计算机处理问题的7个层级："></a>计算机处理问题的7个层级：</h3><ol><li>Problems</li><li>Algorithm</li><li>Language 代码语言</li><li>机器架构 ISA</li><li>电路 circuit</li><li>device</li></ol><p><strong>计算机如何工作？程序在计算机中如何运行？</strong></p><p><strong>本书能提供一个体系的解答。</strong></p><p>人类使用计算机解决问题，会经历一下几个层面的过程：</p><p>算法，语言，机器(ISA)结构，微结构，电路，器件。</p><ul><li>算法：解决问题的步骤。</li><li>语言：包括高级语言（如C++,Python）,汇编语言等等。用于实现算法。</li><li>ISA结构（Instruction set architecture）<ul><li>The next step is to translate the program into the instruction set of the <strong>particular computer</strong> that will be used to carry out the work of the program</li><li>the ISA of a computer specififies the interface between the computer program directing the computer hardware and the hardware carrying out those directions. </li><li>ISA的定义包括：opcode：操作码；operand：操作数；data type：数据类型；<strong>addressing mode：寻址模式</strong></li><li>编译器compiler负责把高级语言翻译为当前计算机的ISA</li><li>可以理解为CPU才能读懂的指令集（Instruction Set Architecture）。不同厂家的CPU所用的ISA不同，指令数目也不尽相同。而汇编语言的每个语句通常与ISA有一对一的关系。换言之，汇编语言是ISA操作码，逻辑和指令的抽象集合。</li></ul></li></ul><p><img src="/2022/10/22/ji-suan-ji-xi-tong-gai-lun-xue-xi-bi-ji/10-22Computer_Programming_study\ISA.png" alt></p><p>我们知道，<strong>汇编器</strong>(assembler)可以将汇编语言转换成相应的<strong>机器码</strong>（一堆指令集）。它们是一一对应的。而一种CPU只能理解一种机器码，因此不同CPU厂家的汇编语言也会不一样。</p><ul><li>微结构：要想实现ISA中的许多功能，我们需要物理上的硬件帮助我们实现。不同操作（如加法，寻址）有不同的微结构实现方式（ALU，mux等等）。</li><li>逻辑电路。与、或、非</li><li>CMOS、NMOS电子元器件。</li></ul><p>一个厂家在更新CPU的时候，通常不希望改变自己的ISA，而是优化自己的微结构。否则一旦升级，从汇编语言到高级语言的代码都将不能在新版本上正常运行。</p><h1 id="第二章-bits，数据类型及其运算"><a href="#第二章-bits，数据类型及其运算" class="headerlink" title="第二章 bits，数据类型及其运算"></a>第二章 bits，数据类型及其运算</h1><p>我们总能听到：计算机内部的所有东西都是以二进制形式存储的。但是为什么是二进制呢？二进制怎么实现十进制数据的运算呢？小数怎么表示成二进制呢？ We don’t know。</p><ol><li><p>Why 二进制？<br>我们可以用“1”表示一个高电位，用“0”表示一个低电位。这样一来，在计算机的微观结构中，我们只需要知道某个点的电位相较于某中间值的高低，而不需要知道其具体大小。减小电压波动带来的误差。</p></li><li><p>How to use it?</p></li></ol><p>二进制的加、减法，二进制转十进制、十六进制比较基础，在此不赘述。在此主要讲数据类型——各种数据在计算机中的表达方式。</p><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><p>下图以5bit的数据为例，在不同的人为规定下，每个5位二进制代表的整数各不相同。</p><p><img src="/2022/10/22/ji-suan-ji-xi-tong-gai-lun-xue-xi-bi-ji/10-22Computer_Programming_study\Figure2.1.png" alt></p><ul><li>无符号整形<ul><li>5-bit二进制共能表示0~2^5-1的整数</li></ul></li><li>有符号整形<ul><li>首尾表示符号</li><li>负数的二进制表示由其对应正数的二进制取反得到。如： 由5（00101）得到 -5（11010）；11111表示-0</li><li>负数的二进制表示由其对应正数的补码得到。例如：<ul><li><code>5(Oct)=(00101)(Bin)</code> 得到 <code>-5(Oct)=(11011)(Bin)</code></li><li><code>31(Oct)=(01111)(Bin)</code> —&gt; <code>-31(Oct)=(10001)(Bin)</code></li><li><code>1(Oct)=(00001)(Bin)</code> —&gt; <code>-1(Oct)=(11111)(Bin)</code></li></ul></li></ul></li></ul><blockquote><p>正数的补码是其本身；负数补码将所有的二进制位取反加1。例如(1101)(Bin) —&gt; (0010)(Bin) —&gt; (0011)(Bin)。 二进制数1101的补码就是0011。</p></blockquote><p>现代计算机中，使用的方法是最后一种。</p><blockquote><p>Q ：对<code>00000</code>取反加1，得到的应该是<code>10000</code>, 为什么答案是<code>00000</code>?</p><p>A ：因为我们规定了数据类型的长度为6bit，所以多出来的第7位自动被忽略掉</p><p>Q ：用6bit的数据类型没法表示+32，那-32怎么来的呢？</p><p>A ：我们按上述方法列数所有的负数，发现还有一个六位二进制组合没有用到。它就是<code>(10000)(Bin)</code>，我们就人为规定它表示-16。</p></blockquote><p><strong>那我们为什么需要用补码来表示负数呢？</strong></p><p>相邻两个码子之间的差值正好是00001。</p><p><img src="/2022/10/22/ji-suan-ji-xi-tong-gai-lun-xue-xi-bi-ji/code.png" alt></p><h2 id="bit运算"><a href="#bit运算" class="headerlink" title="bit运算"></a>bit运算</h2><ul><li><p>加法直接加</p></li><li><p>减法先转换成其补码，后加。A-B=A+(-B)</p></li><li><p>逻辑运算</p><ul><li><p>与、或、非、异或</p></li><li><p>摩根定律</p><script type="math/tex; mode=display">\overline{A \cdot B} = \overline{A} + \overline{B}</script></li></ul></li></ul><h2 id="位矢量bit-vector"><a href="#位矢量bit-vector" class="headerlink" title="位矢量bit-vector"></a>位矢量bit-vector</h2><p>不知道和矢量有什么关系。</p><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><p>LC-3体系结构中，整数表示方法使用16-bit补码，能表示的数值范围是：</p><script type="math/tex; mode=display">-2^{15} \sim 2^{15}-1</script><p>计算机不能精确地表示所有的小数。这也是为什么我们经常讲“精度损失”。原因在于，二进制小数只能用2^-N的组合来表示小数部分。例如 <code>0.75(Oct)=0.5(Oct)+0.25(Oct)=(0.11)(Bin)</code> 十进制数0.9, 就不能用二进制小数精确表示。</p><p>Most ISAs today specify more than one floating point data type. One of them, usually called <em>float</em>, consists of 32 bits, allocated as follows：</p><h3 id="32-bit-float"><a href="#32-bit-float" class="headerlink" title="32-bit-float"></a>32-bit-float</h3><ul><li>符号位：1-bit</li><li>8-bit表示指数</li><li>23-bit表示精度</li></ul><p><img src="/2022/10/22/ji-suan-ji-xi-tong-gai-lun-xue-xi-bi-ji/Figure2.3.png" alt></p><p>一串32位的浮点数表示的小数为：</p><script type="math/tex; mode=display">N = (-1)^S \times 1.fraction\times2^{exponent-127},1\le exponent\le254</script><h3 id="infinity"><a href="#infinity" class="headerlink" title="infinity"></a>infinity</h3><p>当指数部分exponent = 0 或 254时</p><h1 id="数电"><a href="#数电" class="headerlink" title="数电"></a>数电</h1><h2 id="晶体管"><a href="#晶体管" class="headerlink" title="晶体管"></a>晶体管</h2><ul><li>N-type MOS</li></ul><p><img src="/2022/10/22/ji-suan-ji-xi-tong-gai-lun-xue-xi-bi-ji/10-22Computer_Programming_study\nMOS.png" alt></p><ul><li>p-type MOS </li></ul><p><img src="/2022/10/22/ji-suan-ji-xi-tong-gai-lun-xue-xi-bi-ji/10-22Computer_Programming_study\pMOS.png" alt></p><h2 id="逻辑门"><a href="#逻辑门" class="headerlink" title="逻辑门"></a>逻辑门</h2><p><img src="/2022/10/22/ji-suan-ji-xi-tong-gai-lun-xue-xi-bi-ji/10-22Computer_Programming_study\Figure3.9.png" alt></p><h2 id="组合逻辑门"><a href="#组合逻辑门" class="headerlink" title="组合逻辑门"></a>组合逻辑门</h2><h3 id="解码器"><a href="#解码器" class="headerlink" title="解码器"></a>解码器</h3><ul><li>k-bit输入，$2^k$ 个输出</li></ul><h3 id="多路复用器"><a href="#多路复用器" class="headerlink" title="多路复用器"></a>多路复用器</h3><p><img src="/2022/10/22/ji-suan-ji-xi-tong-gai-lun-xue-xi-bi-ji/10-22Computer_Programming_study\Figure3.13.png" alt></p><p>从多个输入中选择一个，连接到输出。</p><p>$2^k$个输入端，k条线用于选择，1条输出。</p>]]></content>
      
      
      <categories>
          
          <category> Nonsense </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++重载运算符</title>
      <link href="/2022/10/18/c-chong-zai-yun-suan-fu/"/>
      <url>/2022/10/18/c-chong-zai-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<p>最近突然开始看C++的重载运算符。想到了一些历史遗留问题。</p><ul><li><p>重载<code>[]</code>运算符</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">safearay</span><span class="token punctuation">&#123;</span>   <span class="token keyword">private</span><span class="token operator">:</span>      <span class="token keyword">int</span> arr<span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">public</span><span class="token operator">:</span>      <span class="token function">safearay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">&#123;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token comment">// 为什么是int &amp;  怎么理解？</span>      <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重载<code>&lt;&lt;</code>运算符，实现自己的‘cout’。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">const</span> node<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token comment">//这么多const和这里的&amp;是什么意思？</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>myout<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>在此先感谢xzy的鼎力相助！</p><p><strong>1. 这里的 <code>&amp;</code> 是什么作用?</strong></p><p>学习过指针的同学知道，我们定义一个指针ptr，里面需要存储的是一个地址。我们使用的方法是：<br><code>int a=0, *ptr=&amp;a;</code></p><p><code>*ptr</code>表示定义了一个指针变量，<code>&amp;a</code> 表示取变量 <code>a</code> 的地址。比如0x61fe0c2，0x表示十六进制，整体表示一个32位地址。</p><p>但是此处的&amp;用法肯定和上面不同：一个operator 能有什么地址？</p><p>不要忘记，我们还有一个地方用到了<code>&amp;</code>。<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> tmp<span class="token punctuation">;</span>tmp<span class="token operator">=</span>a<span class="token punctuation">,</span> a<span class="token operator">=</span>b<span class="token punctuation">,</span> b<span class="token operator">=</span>tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token function">swap</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>在这里，我们交换了<code>x</code>和<code>y</code>。<code>swap</code>函数的参数为两个“引用值”。<br>将变量<code>x</code>,<code>y</code>传递至<code>swap</code>函数后，相当于执行了操作：<br><code>int &amp;a=x, &amp;b=y;</code></p><p>此处, <code>a</code>和<code>b</code>相当于<code>x</code>和<code>y</code>的别名。我改变了<code>a</code>与<code>b</code>，同时也改变了<code>x</code>与<code>y</code>。因而，我们能在函数中实现<code>x</code>和<code>y</code>的交换。</p><p>如果我们输出<code>a</code>和<code>x</code>的地址，我们能发现，他们在内存中的地址是一样的！</p><p>也就是说，在内存中，程序不会为a新分配一个空间。<br><pre class="line-numbers language-none"><code class="language-none">int a&#x3D;0; int *p &#x3D; &amp;a; int&amp; b&#x3D;a;   cout&lt;&lt;&amp;b&lt;&lt;&#39; &#39;&lt;&lt;&amp;a&lt;&lt;&#39; &#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>输出： <code>0x61fe0c 0x61fe0c</code></p><p><strong>2. 如果能理解引用，我们再回过头看重载运算符。</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">return</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>X<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token operator">=</span>X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>X<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们理解一下这里main里的语句。</p><p><code>a=x[1]+x[2]</code>,<code>[]</code>已经被重载了，所以程序会返回<code>arr[1]</code>和<code>arr[2]</code>。<br><code>a=X.arr[1]+X.arr[2]</code>,没问题。</p><p><code>x[1]=4;</code>当我们执行<code>x[1]</code>这部分时，重载函数就直接返回一个“替身”。这个替身没有名字，替身的主人是<code>X.arr[1]</code>。</p><p>这样一来，等号左边是一个替身，我们让它等于4，就相当于正在操作<code>X.arr[1]=4</code>。</p><p>因此，此处的<code>&amp;</code>能够让我们方便地使用赋值操作。如果缺失了<code>&amp;</code>,无法赋值,甚至编译都无法通过。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">node</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>X<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token operator">=</span>X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>X<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%d,"</span><span class="token punctuation">,</span>X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>X<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出 <code>1,3,4</code></p><p>去掉重载运算符的<code>&amp;</code>，编译器提示：<code>表达式必须是可修改的左值</code></p><p><strong>3. C++的cin,cout的实现方式?</strong></p><p>网上有很多人讨论cin、cout在C++中属于什么成分。它不像函数，用法却神似函数。这里我们自己实现了myout,可以明显地看出，myout是一个“对象”。 就像上面的变量X一样。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">node</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">const</span> node<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token comment">//这么多const和这里的&amp;是什么意思？</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">const</span> node<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token keyword">double</span> value<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>myout<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过重载运算符，我们能更方便地输出各种数据类型，而不用写<code>%d</code>,<code>%lf</code>等等标识符。例如：<code>myout&lt;&lt;1&lt;&lt;1.5;</code></p><p>我们可以尝试模拟一下这里的过程。</p><p>首先，执行<code>myout&lt;&lt;1</code>。不重载的话，<code>&lt;&lt;</code>是位运算的意思，即<code>myout*2</code>。不过我们既然重载了运算符，就按我们写的方式来。</p><p><code>myout&lt;&lt;1</code> ，输出了1，并返回了对象<code>myout</code>本身。剩下什么？剩下了<code>myout&lt;&lt;1.5</code>。</p><p>形象地讲，<code>(myout&lt;&lt;1)&lt;&lt;1.5 == myout &lt;&lt; 1.5;</code></p><p>于是，我们又可以调用一遍重载运算符，继续输出1.5！</p><p>那么问题来了：如果我不返回一个“引用”,即<code>const node operator &lt;&lt; (int value) const&#123;...&#125;</code>好像也能实现啊？</p><p>问题在于：如果没有引用，每次返回时，程序都会重新为一个新的对象开辟空间。不管是时间还是空间上，都是一种损耗。</p><p>当类里面封装的内容比较庞大时，比如高精度，这样子做显然是不合适的。</p><p><strong>4. 两个<code>const</code>是什么成分？</strong></p><p>我们知道<code>const int a=0;</code> 此时我们就不能对<code>a</code>进行赋值。</p><p>此处的<code>const</code> 作用相同。为了防止我们对myout中的任何参数进行改变，我们加上了const。</p><p>后面的<code>const</code>则是防止大括号内的<code>*this</code>被改变。</p><p>这就称为“Read Only”.</p>]]></content>
      
      
      <categories>
          
          <category> Nonsense </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客维护日志</title>
      <link href="/2022/10/15/my-first-blog/"/>
      <url>/2022/10/15/my-first-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作家写书都有序，结尾有跋。我也装模作样写一个。</p><p>搭建自己博客的初衷是为分流面试添砖加瓦。而所有的一切都不是想象中的那么顺利。作为一个小白，我遇到的很多问题都不能够自己解决，需要投靠搜索引擎寻找那些和我有相同处境的人。</p><p>因此在这篇博客记录网站维护及更新记录，算作对自己成长的记录。</p><h2 id="About-This-Blog"><a href="#About-This-Blog" class="headerlink" title="About This Blog"></a>About This Blog</h2><p>本博客使用Github仓库 + <a href="https://hexo.io/">Hexo</a> 搭建。使用主题：<a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a></p><p>Matery作者的仓库有详细的部署教程，网上也有相应的踩坑记录。一定要勤搜索，主动解决问题。</p><h2 id="维护日志"><a href="#维护日志" class="headerlink" title="维护日志"></a>维护日志</h2><h3 id="出现乱码"><a href="#出现乱码" class="headerlink" title="出现乱码"></a>出现乱码</h3><p>下载好了next主题并部署了网站，打开 <a href="http://localhost:4000/">http://localhost:4000/</a> 却发现呈现出一堆乱码。</p><p><img src="/2022/10/15/my-first-blog/1.png" alt></p><p>这是因为缺少了swig组件。这个组件干啥用，为啥会缺少，我没去管。</p><p>只需在Git中输入：</p><p><code>npm i hexo-renderer-swig</code></p><p>即可安装。随后我们重新加载网页，就能看到成型的博客了。</p><p><img src="/2022/10/15/my-first-blog/2.png" alt></p><h4 id="什么是front-matter"><a href="#什么是front-matter" class="headerlink" title="什么是front-matter?"></a>什么是front-matter?</h4><p>在新建的.md文件中，就有这样一段。</p><pre class="line-numbers language-none"><code class="language-none">---layout:  - default_layouttitle: My First Blogdate: 2022-10-15 22:28:09categories: New Gadgets---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它用于设置文档的几个基本属性。例如categories分类，最后会在网站上体现出来。<br>新手可以多尝试不同的属性，在本地观察效果，快速了解不同的属性。</p><h3 id="图片引用"><a href="#图片引用" class="headerlink" title="图片引用"></a>图片引用</h3><p>markdown引用图片时，文件路径中不能有空格或者中文！</p><p>例如 <code>![](./My First Blog/1.png)</code> 就不能正常引用图片。 </p><h2 id="其他问题记录"><a href="#其他问题记录" class="headerlink" title="其他问题记录"></a>其他问题记录</h2><ul><li><p><a href="https://runninggump.github.io/2018/12/05/%E6%88%90%E5%8A%9F%E8%A7%A3%E5%86%B3%E5%9C%A8hexo%E4%B8%AD%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E7%9A%84%E9%97%AE%E9%A2%98/">博客无法正常显示数学公式</a></p></li><li><p><a href="https://trifond.github.io/2018/12/05/hexo-folder-ignore-case/">Hexo部署到Github后文件夹名大小写引起的问题</a></p></li><li><p><a href="http://luckyzmj.cn/posts/1b9a9e28.html">Matery主题代码块出现的各种Bug</a></p></li></ul><h2 id="23-11-29"><a href="#23-11-29" class="headerlink" title="23/11/29"></a>23/11/29</h2><p>发现友联的图片全爆了，遂上网找图床，并更新了一堆友联。</p><p>为了减少服务器的压力，不少站长还是选择图床存放图片的</p><p>Ref：<a href="https://zhuanlan.zhihu.com/p/58863378?from_voters_page=true&amp;utm_id=0">最全的图床集合（国内外，站长必备） - 知乎 (zhihu.com)</a></p><p>现在使用：<a href="https://img.tg/">https://img.tg/</a></p><h2 id="24-2-13"><a href="#24-2-13" class="headerlink" title="24/2/13"></a>24/2/13</h2><p><strong>Bug Fix</strong></p><p>在博客中引用<strong>本地图片</strong>时，务必将图片放在与Markdown文件同名文件夹下，文件夹路径与Md文件相同。</p><p>例如，某篇博客的Md文件路径为<code>./pathToYourBlog/source/_posts/Blog.md</code></p><p>用到的图片素材需要放在：<code>./pathToYourBlog/source/_posts/Blog/</code> 文件夹下。</p><p>个人感觉非常愚蠢，但我愚蠢到不知道怎么修。</p><p><strong>New Function</strong></p><p>使用<a href="https://github.com/utterance/utterances">utterances </a> 添加评论功能。参考博客：<a href="https://roife.github.io/posts/use-utterances-for-blog-comment/">使用 Utterances 为静态博客添加评论 | ROIFE BLOG</a></p><p>按照博客的描述，最后我们能得到一段包含自定义配置的JavaScript 代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://utteranc.es/client.js"</span>        repo<span class="token operator">=</span><span class="token string">"[ENTER REPO HERE]"</span>        issue<span class="token operator">-</span>term<span class="token operator">=</span><span class="token string">"pathname"</span>        theme<span class="token operator">=</span><span class="token string">"github-light"</span>        crossorigin<span class="token operator">=</span><span class="token string">"anonymous"</span>        async<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复制这段代码，找到Hexo主题文件夹中的<code>layout</code>文件夹，在<code>layout</code>文件夹中，查找与文章相关的布局文件，通常是<code>post.ejs</code>或<code>article.ejs</code>。</p><p>打开<code>post.ejs</code>或<code>article.ejs</code>文件，找到适合插入评论插件的位置，通常是在文章内容之后或侧边栏之后。</p><p>在<code>&lt;main&gt;</code>标签的结束标签<code>&lt;/main&gt;</code>之后，插入上述代码。重新部署即可。</p><h2 id="24-2-14"><a href="#24-2-14" class="headerlink" title="24/2/14"></a>24/2/14</h2><p>Hexo部署到远端服务器（github）时报错：</p><pre class="line-numbers language-none"><code class="language-none">Error: Spawn failed    at ChildProcess.&lt;anonymous&gt; (D:\Myblog\node_modules\hexo-util\lib\spawn.js:51:21)    at ChildProcess.emit (node:events:513:28)    at ChildProcess.cp.emit (D:\Myblog\node_modules\cross-spawn\lib\enoent.js:34:29)    at Process.ChildProcess._handle.onexit (node:internal&#x2F;child_process:293:12)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Nonsense </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blogs </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
